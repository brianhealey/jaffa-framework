Changes To Domain Object Pattern v1.1
======================================
- Refactor the Uniface tool to use JAXB bindings for writing the XMLs
- Mandatory -> T/F -> Make Boolean true/false
- Remove Width, or use it for String fields and not IntSize
- DatabaseDataType is really a 'JaffaDataType', we map to the database - use enumerated type
- Allow for XSD validation.
- Add the attribute 'minLength' for a field definition of each domain object. Enhance the creation of StringFieldMetaData objects to use the new attribute. Enhnce the Uniface tool to generate the 'minLength' definition for each field.


Patterns
========
- Enhance the Maintenance Pattern to add related objects within the transaction scope of the main domain object
    - Enhance the UserGrid widget to support a checkbox in the header to Select/Deselect all checkboxes in a column
    - Enhance the Multi-Select Lookup to use the above feature of the UserGrid
    - Add an attribute to the RelatedObject definition to allow it to be created within the same scope as the main domain object
    - Provide the 'Add Multiple' button to add multiple rows using the Multi-Select Lookup
    - List all possible many-to-many related objects and allow the ability to select one or more, creating resolving entity records
        - Eg. User, Role, UserRole
    - Allow editable fields in each row
    - Allow editable foreign-objects + lookups in each row
    - Allow display-only information for each foreign-object
    - Provide the 'Add Single' button to add a single blank row
    - Allow a 'detail' screen for each row for enhanced editing
    - Allow 'Add New' in the detail screen
- Enhance the Maintenance Pattern to support technical keys which are generated by the database.
- Enhance the Maintenance Pattern to support Unique keys.
- Enhance the Maintenance Pattern to consider fields which might be part of multiple foreign-objects
- Remove references to redundant/un-used logical data-types (create common_2_0 package and use it in the version2_0 patterns)
- Provide default values for the criteria fields in the Finder/Lookup Patterns. Also provide constructors with unguarded portions
- Create ApplicationResources fragments from the domain-object pattern. This will need logic for retaining existing values
- Stop generating ApplicationResources.properties from the various patterns and instead create fragments with the entries for the screen titles
- Introduce the Database View Pattern
- Rearchitect the Finders/Lookups to use base classes which read the meta files at runtime. Provide plugin points for customizations. This will reduce the code-bloat
- Refactor the DTDs/XSDs removing the 'Root' element with more meaningful names.


Persistence
===========
- Enhance the preDelete() method in Persistent to cascade delete the related objects or raise an exception if a related object has 'restricted' delete-constraint. Remove the equivalent code from the maintenance pattern.
- Provide a reload() method in UOW
- Provide ability to specify FieldList in queries
- Provide a convenience method in each domain class to return a domain instance based on key-fields
- Support JTA and multiple data-sources in the Persisence Engine
- Support relationships in domain objects
- Use Batch statements for updates/inserts/deletes to improve performance
- Use JAXB for reading the mapping-files
- Check out http://www.informit.com/isapi/product_id~%7BD50CE967-D5F3-4118-B435-D23AF19BBEBE%7D/content/index.asp for using the UPDLOCK hints for SQLServer
- Provide functions on queries like sum, min, max, count..


Presentation
============
- Modify the Form classes to maintain a Map of FieldName/FormBeanField objects. Each  FormBeanField object can have a WidgetModel, FieldMetaData and methods for accessing/setting the various properties. This will provide a consolidated access point to a field. All the widgets text, label, editbox.. will utilise the Map to access the various properties of a field. This approach will provide us with a capability to override MetaData with Form variations.
- Move the JSPs to a folder under WEB-INF. This way, a JSP will always have to be fronted by an action, and can never be invoked directly
- Refactor the widgets to run inside Struts without requiring the JAFFA component architecture. Enhance the widgets to use regular java objects in addition to models. As an example, modify the struts-example webapp to use the JAFFA widgets.


Datatypes
=========
- Use the java.sql.Date and java.sql.Timestamp instead of the custom date classes. Move the code from the custom date classes to a utility class.
- Introduce datatypes - BigDecimal, BigInteger, Byte, Float, Integer, Short. Pass 'Number' objects around in the DTOs and domain objects, instead of specific class instances.


Tools
=====
- Create a development tool to translate any SQL to appropriate Java code
- Create a build tool to verify the data in the Domain Mapping files
- Create a build tool to verify the data in the RulesEngine XML files. Ensure correct domain and field names are used
- GUI tool for creating/editing pattern meta data
- Dreamweaver integration for widgets


Middleware
==========
- Provide a Web Service Wrapper for the Tx classes, which will handle the exceptions and set/reset the context
- Enhance the Factory to create Web Service, EJB proxy for the Tx
- Provide a JMS wrapper for a Tx


Security
========
- We have setContext,unSetContext in SecurityTag, which is used by FormTag. These can probably be REMOVED, and the FormTag refactored, as the context is now set via the filter for both Actions(*.do) and JSP's

Others
=======
- Enhance the CacheManager to load the various caching strategies from an XML descriptor
- Test against other servlet containers - jetty, resin
- Add the capability to lookup a message from a resource-bundle in the busniess-tier
- Make the UserSession implement the Serializable interface. This is required to support web-server clustering. The following issues are involved:
    - It maintains a link to the HttpSession. Need to check if a circular reference would cause serialization errors
    - Make UserData implement the Serializable interface
    - Make the 'widgetCache' field transient. Fix all references to widgetCache to check for null values, since de-serialization will leave it as null.
    - Not sure how the SessionManager would work with distributed UserSession objects.
    - Make Component implement the Serializable interface. This may be non-trivial

Standards
=========
- The following DTD/XSD names don't comply with the naming convention used by Jaffa
	appBuilderMeta_1_0.xsd			-> app-builder-meta_1_0.xsd
	domainCreatorMeta_1_0.dtd		-> domain-creator-meta_1_0.dtd
	domainCreatorMeta_1_0.xsd		-> domain-creator-meta_1_0.xsd
	dataTypes_1_0.xsd			-> data-types_1_0.xsd
	domainForXmlMeta_1_0.dtd		-> domain-for-xml-meta_1_0.dtd
	domainMetaInfoGenerator_1_0.dtd		-> domain-meta-info-generator_1_0.dtd
	objectFinderMeta_1_0.xsd		-> object-finder-meta_1_0.xsd
	objectLookupMeta_1_0.xsd		-> object-lookup-meta_1_0.xsd
	objectMaintenanceMeta_1_0.xsd		-> object-maintenance-meta_1_0.xsd
	objectViewerMeta_1_0.xsd		-> object-viewer-meta_1_0.xsd
	storedProcedureCreatorMeta_1_0.dtd	-> stored-procedure-creator-meta_1_0.dtd
	unitTestConfig_1_0.xsd			-> unit-test-config_1_0.xsd
	relationshipInfo_1_0.dtd		-> relationship-info_1_0.dtd
	sourceChain_1_0.xsd			-> source-chain_1_0.xsd
	tableInfo_1_0.dtd			-> table-info_1_0.dtd
