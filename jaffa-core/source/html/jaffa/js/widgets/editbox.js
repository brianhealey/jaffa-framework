/**********************************************************************************************
 * JAFFA - Java Application Framework For All - Copyright (C) 2002 JAFFA Development Group
 *
 * This library is free software; you can redistribute it and/or modify it under the terms
 * of the GNU Lesser General Public License (version 2.1 any later).
 * 
 * See http://jaffa.sourceforge.net/site/legal.html for more details.
 *********************************************************************************************/

//////////////////////////////////////
// editbox.js - Defalut code for all EditBox widgets on page
//
// By Paul Extance - Re Written By Jonny Reid
//
////////////////////////////////////////////////////
// Modified the name of all the check functions
// Removed editBoxPostEvent, as the equivalent JavaScript
// is now directly generated by the widget
// data for lazy widgets, and to build extra form fields
// into an XML document and post as a hidden field
//
// Version: 1.1
// Modified: 20-Aug-2001 
////////////////////////////////////////////////////
// To Do...
// - Implement Validation Logic
////////////////////////////////////////////////////

function editBoxCheckNumeric(field, size , digits , minValue , maxValue , groupingSeperator , decimalSeperator) { 
        
        source = field.value.toString();
	// Remove $, commas from number
	//num = source.toString().replace(/\$|\,| /g,'');
	while (source.indexOf(groupingSeperator) != -1) {
		temp = source.substring(0,source.indexOf(groupingSeperator));
		temp2 = source.substring(source.indexOf(groupingSeperator) + 1 ,source.length);
		source = temp + temp2;
	}
	if (source.indexOf(decimalSeperator) != -1 && decimalSeperator !=".") {	
		while (source.indexOf(decimalSeperator) != -1) {
			temp = source.substring(0,source.indexOf(decimalSeperator));
			temp2 = source.substring(source.indexOf(decimalSeperator) + 1 ,source.length);
			source = temp + "." + temp2;
		}
	}	
	num = source;
	// Is this a number 
	var patten = /^[+-]?([0-9]*)(\.([0-9]*))?$/; 
	var matchArray = num.match(patten); 
	// is the format ok?
	 	
	if (matchArray == null) {
		return "This number is not valid. Please Re-enter";
	} else {
		if (matchArray[2].length > 0 && digits ==0) {
			return "Only integer values can be used here. Please re-enter.";
		}
		fraction = matchArray[3];
		if(digits != null) {
			if(fraction != "" && fraction.length > digits) {
				if(digits==0)
					return "Only integer values can be used here. Please re-enter.";
				else
					return "The number of allowable decimal places are " + digits + ". Please Re-enter";
			}
		}
		
		else {
			// Reset the field as spaces/commas were removed.
			//field.value = num;
			return "";
		}
			 	
		        if ((size != null) && (matchArray[1].length > size)) {
		        	return "Too many digits. Please re-enter.";
		        }
		         	
		        if ((minValue != null) && (source < minValue)) {
		        	return "Value cannot be less than " + minValue + ". Please re-enter.";
		        }
		         	
		        if ((maxValue != null) && (source > maxValue)) {
		        	return "Value exceeds maximum value of " + maxValue + ". Please re-enter.";
		        }
         	
		return "";
	}

}


// Trim leading and trailing white-space from a field
function editBoxTrim(field) {
    // skip leading and trailing whitespace
    // and return everything in between
    field.value = field.value.replace(/^\s*(\b.*\b|)\s*$/, "$1");
}

// This rountine will auto focus the next targetted field
function changeField(fieldId,fieldObject){
    if(fieldObject.value.length == fieldObject.maxLength){
		document.getElementById(fieldId).focus();
	}
}

