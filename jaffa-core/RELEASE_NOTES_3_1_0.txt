Welcome to JAFFA - Java Application Framework For All
=====================================================

These are the changes made for the JAFFA 3.1.0 Release (Since v3.0.0). For more information visit us at http://jaffa.sourceforge.net


What's New
=====================================================
Presentation
------------
- The LookupTag has been enhanced to work with fields spread across a Grid.
  - This is very useful if a page is built dynamically using a Grid
  - For eg: Lets assume there is a Grid with 2 rows, each row having an EditBox 'aField', we can specify a Lookup against the field in row1 as
    <Portlet:Lookup ... targetFields='aField=param1;aField+1=param2'/>
  - Thus we can add constructs like +1,+2,-1,-2 etc etc to reference fields across a Grid
- The postForm function in header.js has been enhanced to prevent un-intentional double-clicks
- Display javascript errors after and lookup next to the field, previously the error was over the top of this and the lookup could not be clicked. Also offset the vertical position of any additional errors raised on the same line
- Modified the CustomRequestProcessor to throw a ServletException when the size of the file being uploaded exceeds the maximum allowed, rather than just returning
- The sectionNav.jsp, navigation.js and datetimePicker.js make extensive use of header.js' getElementsByClassName() method. The existing implementation of getElementsByClassName() would scan the complete DOM looking for elements having a particular class. This would simply freeze IE. The following changes have been made to improve the performance:
  - The getElementsByClassName() function has now been enhanced to take in a root element and tag name as input parameters to faciliate faster scans of the DOM.
  - Addtionally, the header.js now holds the foldingSectionList variable to allow faster lookups of the <span> elements having the class WidgetFoldingSection.
  - The reset.js now, rulesValidator.js and sectionNav.jsp now use the foldingSectionList variable to obtain the FoldingSection elements.
  - The navigation.js and datetimePicker.js now use the enhanced getElementsByClassName() method.
  - FoldingSectionTag has been modified to add each FoldingSection element to the foldingSectionList variable.
- Added the 'guarded=true' attribute to the Refresh button for all Finders and Lookups, so that we see a transition page on a refresh event. Also added the 'preprocess=false' attribute to Refresh, ModifySearch and CreateFromResults buttons on all Finders and Lookups, which should make those events more responsive.
- Removed all restrictions on the operator/values combination in the various CriteriField classes. This makes it easy for the presentation-tier to simply capture the operator and values entered by the user, without having to determine if the combination is valid. Its upto the business-tier to use the encapsulated criteria as it deems fit. 

Widgets
-------
- Introduced SimpleWidgetController and made all the other controllers utilize the new class
- The GridTag has been corrected to generate floating-help even in the absence of key columns, in which case it merely displays the name of the current column
- Fixed the GridTag, correcting the syntax-error for the visibility style-definition from blank to 'visible'
- CheckBoxTag has been modified to generate a hidden field only if the checkbox is not enclosed in a Grid. This reduces the number of elements in a page, thus improving the performance.
- Corrected the GridColumnTag to obtain the surrounding GridTag from its Parent heirarchy, rather than relying on the standard findAncestorWithClass() method. This change will enable us to specify GridColumns in a file separate from the surrounding Grid.
- The PropertyTag has been enhanced to support scoping of its inner PropertyTag instances within a particular propertyClass. Hence we can now define an outer PropertyTag with only a propertyClass. Its inner PropertyTags will get its propertyClass, if none have been specified for them.
- Enhanced the CustomTag to provide a helper findCustomTagAncestorWithClass() routine. This can be used instead of the standard findAncestorWithClass() method, since it allows a tag to locate an outer tag from a surrounding JSP. Modified all the Jaffa tags to utilize the new method
- Enhanced the EditBox widget to use the application rules 'jaffa.widgets.textarea.wrap' and 'jaffa.widgets.textarea.defaultColumns' for generating the 'wrap' and 'cols' attributes of the textarea tag

Components & Patterns
---------------------

Persistence
-----------
- The PreparedStatement cache has been discontinued. Its now left to the DataSource configuration to control caching
- Jaffa now closes PreparedStatement objects before releasing a connection
- The ResultSet objects are now explicitly closed, so that monitoring tools do not report un-necessary errors
- Modified the JDBCEngine to trap the locking errors and wrap them inside an ApplicationException. This way we can display a more useful message to the user. Made the following changes
  - Created a extractApplicationExceptions() method in the Engine to extract ApplicationException(s), Locking errors and Custom SQL errors
  - The various public methods of the Engine now utlize the new extractApplicationExceptions() method
  - The Interceptor classes do not need to trap any application errors

General
-------
- Moved the cleanupNewSession() logic from PortletFilter to a new class JaffaHttpSessionListener.
  - This will ensure that all attributes are removed from an invalidated session.
  - To use this listener, specify the following in your applications web.xml file
    <listener><listener-class>org.jaffa.presentation.portlet.JaffaHttpSessionListener</listener-class></listener>
- Created an ExceptionHelper class which has helper routines for dealing with Exceptions
- Overloaded the BeanHelper.setField() method to accept any Object
- Enhanced the EmailHelper.emailAttachments() method to set the contentType to either html or text, based on the presence of html tags
- Fixed the java1.5 warnings in Jaffa projects
  - Use getMethod(methodName, (Class[]) null) instead of getMethod(methodName, null)
  - Use invoke(object, (Object[]) null) instead of invoke(object, null)
- Enhanced the DataTypeMapper to support String to java.util.Date conversion
- Fixed the NavAccessor to not cache the menu options in an un-authenticated user's session
- Modified the EmailerBean to read initial values from the ContextManager incase AOP injection is not used. Also added more 'sendEmail' options to this class. An empty string is treated like a NULL. If the from address is not initialized it defaults to "admin@jaffa.sf.net"
- Added utility method to BeanHelper "String listMethods(Class beanClass)" for debugging beans. Will list all methods on the bean
- Enhanced the FinderTx to correctly handle situations when empty strings are passed in the operator and values properties of a criteria field by a non-Jaffa application
- Introduced a ServiceFault class for encapsulating the error message(s) of an Exception. It has been provided for use in WebServices (and possibly JMS), so as to avoid the headache of mapping custom Exceptions to WSDL
- Created a DateCriteriaField. The various WebService implementation have a tough time dealing with the custom DateTime and DateOnly objects. They handle java.util.Date instance much more smoothly. This class should be used as a replacement for DateTimeCriteriaField and DateOnlyCriteriaField instance when transporting data between presentation and business tiers. Constructors and convenience methods have been provided to make the transformation a breeze.


Bug Fixes
=====================================================

Presentation
------------
- Fixed the EditBoxTag to render the contents of the TextArea on a fresh line. This ensures that a leading newline character, if any, is rendered correctly
- Fixed the footer.js to not write cookies with datestamps anymore. A browser typically limits the number of cookies to 20, after which it starts truncating them. It may even remove the JSESSIONID cookie, which can mess up the session.
  - The knockon effect is that errors, if any, on a page will re-popup if we hit the browser-back button. But that should anyway not be used.
- Fixed the ActionBase to generate a new ActionForward, in case it doesn't find any definition in struts-config file. This way an event-handler can return absolute paths as well
- Fixed errorpopup.js to suppress unnecessary re-rendering of a page in a new window. If the target for an event is a new window, and the event-handler throws errors, then along with the error-popup, the current-page was being re-rendered in the new window. Added code that closes the new window. It assumes that the history for such an unnecessary window will be 1. All other windows have history > 1
- The application has been designed to reuse an error-popup to display all error messages. This works fine when running against the same webserver. When running against different webservers, FireFox creates a separate error-popup per webserver and hence there are no issues. But IE doesn't create a separate error-popup per webserver and hence runs into access-related errors.
  The errorpopup.js file has now been enhanced to create a new error-popup if it has no access to an existing error-popup. The maximum allowed is 25, after which the errors will appear in an alert-box until the user closes a few error-popups
- Some rules modify the value of a field, which messes up the current selection. The current selection is very important for the replaceSelection() method of lookup.jsp. Made the following changes to fix the problem
  - Created a new method assignValueAndPreserveSelection() in rulesValidator.js, which preserves the current selection whenever the value for a TextArea is changed
  - Modified the trimWhitespace() and fieldChange() javascript methods to utilize the new assignValueAndPreserveSelection() method
- Fixed the HeaderTag to consider Daylight Savings Time in the getServerDate() javascript function that it generates
- Fixed the GridTag to not ignore the first GridColumn when handling popup hints
- Corrected globalNav.jsp to use the 'onclick' attribute, instead of 'href' for URLs containing javascript. This was done to support menu-options where a new window needs to opened using the window.open() invocation.
- Fixed texttag.css, renaming 'valign' to vertical-align. Also fixed the indentation for that css
- Fixed desktopNav.jsp, changing the href for the 'MakeDefault' anchor-tag from blank to 'javascript:void(0);'. Else it was always reloading the home-page of the application.
- Fixed BareFinderLayout.jsp removing the html, html-head and html-body tags. This Layout is meant to be used inside a MainLayout, which provides those elements. This fix was necessary since the repetition of the html-head code was breaking the theme-switching feature.
- FormTag has been corrected to always close the handle on the GuardedHtml fragments.

Widgets
-------
- The LookupTag has been fixed to not render any HTML in case the user does not have access to the component. Similarly the TextTag has been fixed to not generate any hyperlink in case the user does not have access to the component
- Corrected the FoldingSectionTag to escape the html characters when writing the name-attribute of its <span> tag. This ensures that the SectionNav renders the correct text if a FoldingSection label has special characters
- Reintroduced the labelEditorLink logic in GridColumnTag

Components & Patterns
---------------------
- Corrected the logic in FinderTx.interpretDateTime() for the '>=' and '<=' operators

Persistence
-----------

General
-------
Corrected the FieldValidator to replace \r\n with \n, otherwise the length validations on a String may fail


What's Deleted/Deprecated
=====================================================
- The sections.jsp has been removed since its not used anywhere. The tiles-defs.xml was modified accordingly
