/**
 * @class Ext.Component
 * 
 * This is an extension that will attempt to put a unique attribute
 * called 'testId' on all web components, so that they can be easily
 * identified by a browers based automated testing tool. This should replace
 * the need for the testing tools to use checks like 'innerText' to locate 
 * dom elements.
 * 
 * This avoids using the 'ext-????' values generated by default when no Id 
 * is specified. It also attempts to provide a unique reference based on a 
 * parent panel. This would be the case if two panels with different Id's used
 * the same name within their panels and refered to them using 'itemId' values
 * 
 * The folloing information is used to give an element a unique id
 * a) its hardcoded 'id' property assuming it does not start with 'ext-'
 * b) its 'itemId' property
 * c) name
 * d) its 'mapping'
 * e) iconCls
 * f) 'text' (with spaces replaced with _)
 *
 * @author PaulE
 */
Ext.Component.prototype.initComponent = Ext.Component.prototype.initComponent.createSequence(function () {
  //this function will be called after the execution of the original initComponent()
  this.on('render', this.addTestId, this);
});
Ext.override(Ext.Component, {
  /** @method 
   *  Add the testId to this component.
   *  Called automatically from the initComponent() and uses the value from getTestId() so the value can be overridden by
   *  other subclasses of Ext.Component
   */
  addTestId : function() {
    var testId=this.getTestId();
    if(testId && this.el.dom) { 
      this.el.dom.setAttribute('testId',testId);
      console.info("** TestId=",testId,'/ Element ID=',this.id,(this.xtype?'[widget='+this.xtype+']':''));
    } else {
      //console.info("*** SKIP SET ",this.xtype," TEST ID ", testId, this);
    }
    if(this.getTopToolbar && this.getTopToolbar()) {
      var tb = this.getTopToolbar();
      tb.items.each(function(i) {
         var t = (i.id && !i.id.indexOf("ext-")==0) ? i.id : i.itemId || i.iconCls || (i.text?i.text.replace(' ','_'):null);
         if(t) {
            t=testId+'-'+t;
            console.info("    - [TopToolbar] TestId=",t,'/ Element ID=',i.id,(i.xtype?'[widget='+i.xtype+']':''));
            if (i.el) {
              if(i.el.dom)
                i.el.dom.setAttribute('testId',t);
              else if (i.el)    
                i.el.setAttribute('testId',t);
            } else {
              i.testId = t;
            }
         } else {
            //console.info("*** SKIP SET ",i);    
         }   
         
      }, this);
    }
    if(this.getBottomToolbar && this.getBottomToolbar()) {
      var tb = this.getBottomToolbar();
      tb.items.each(function(i) {
         var t = (i.id && !i.id.indexOf("ext-")==0) ? i.id : i.itemId || i.iconCls || (i.text?i.text.replace(' ','_'):null);
         if(t) {
            t=testId+'-'+t;
            console.info("    - [BottomToolbar] TestId=",t,'/ Element ID=',i.id,(i.xtype?'[widget='+i.xtype+']':''));
            if (i.el) {
              if(i.el.dom)
                i.el.dom.setAttribute('testId',t);
              else if (i.el)    
                i.el.setAttribute('testId',t);
            } else {
              i.testId = t;
            }
         } else {
            //console.info("*** SKIP SET ",i);    
         }   
      }, this);
    }
  }
  
  /** @method Get the TestId that should be added to this component */
  ,getTestId : function() {
    if(this.testId) return this.testId;
    var n;
    if(this.getId() && !this.id.indexOf("ext-")==0)
      n=this.id;
    else {
      n = this.itemId || this.name || this.mapping;
      var p = this.findParentBy(function(p){return p.getTestId && p.getTestId()!=null});
      if(n)
        n = p&&p.getTestId()?p.getTestId()+":"+n:n;
    }
    this.testId=n;
    //if(!this.xtype)  
    //    console.info("*** TEST ID (",this.id,") = ",this.testId,this);
    return this.testId;
  }
});

 
/**
 * @class Ext.Button
 *
 * Need automated testing support for buttons, on the actual <button> tag
 */
Ext.override(Ext.Button, {
  /** @method */
  addTestId : function() {
    var testId=this.getTestId();
    if(testId && this.el) { 
      this.el.child(this.buttonSelector).dom.setAttribute('testId',testId);
      console.info("** TestId=",testId,'/ Element ID=',this.id,'[widget=',(this.xtype?this.xtype:'button'),']');
    }
  }  
});

/**
 * @class Ext.form.TriggerField
 *
 * Need support for the dropdown button on a combo box
 */
Ext.override(Ext.form.TriggerField, {
  /** @method */
  addTestId : function() {
    var testId=this.getTestId();
    if(testId) {
      if(this.el.dom) {
        this.el.dom.setAttribute('testId',testId);
        console.info("** TestId=",testId,'/ Element ID=',this.id,(this.xtype?'[widget='+this.xtype+']':''));
      }  
      if(this.trigger) {
        testId+='-trigger';
        this.trigger.dom.setAttribute('testId',testId);
        console.info('    - [Combo:Menu:',this.displayField||this.mapping,'] TestId=',testId,'/ Element ID=',this.trigger.dom.id);

      }
    }
  }  
});



/**
 * @class Ext.grid.GridPanel
 *
 * Need support for column headers in a grid, and the column header menu dropdown when hovering on a column
 */
Ext.override(Ext.grid.GridPanel, {
  /** @method */
  addTestId : function() {
    Ext.grid.GridPanel.superclass.addTestId.apply(this,arguments);
    var testId=this.getTestId();
    this.xtype = this.xtype || 'grid';
    if(testId) {
      if(this.el.dom) {
        var a = Ext.DomQuery.select('DIV[className*=x-grid3-hd-inner]',this.view.mainHd.dom);
        for(var i=0; i<a.length; i++) {
          var n = this.view.cm.config[i].dataIndex;
          var tId = this.id+'-col-'+n;
          var el = a[i];
          if(el) {
            el.setAttribute('testId',tId);
            console.info('    - [Grid:Column:',n,'] TestId=',tId,'/ Element ID=',el.id);
          }  
          el = a[i].firstChild;
          if(el && el.tagName=='A') {
            tId = this.id+'-btn-'+n;
            el.setAttribute('testId',tId);
            console.info('    - [Grid:Column:Menu:',n,'] TestId=',tId,'/ Element ID=',el.id);
          }  
        }
        if(this.filters) {
          var f = function(gridId) {
            var i=0;
            this.filters.filters.each(function(f) {
              f.menu.items.each(function(f2) {
                if(f2.editor) {
                   if(f2.editor.itemId) {
                     f2.editor.itemId = gridId+":"+f.dataIndex+":filter:"+f2.editor.itemId;
                     console.info('    - [Grid:Column:Filter:',f.dataIndex,'] TestId=',f2.editor.itemId,'/ Element ID=',f2.editor.id);
                   } 
                }
              });
            },this);
          };
          f.defer(200,this,[testId]);      

        }
      }  
    }
  }  
});

/**
 * @class Ext.ux.menu.RangeMenu
 *
 * Need support for filter input boxes on a grid
 * This is needed for getting good automated testing Id's for filter input boxes
 */
Ext.override(Ext.ux.menu.RangeMenu, {
  fieldCfg: {
    'gt': {itemId:'gt'},
    'lt': {itemId:'lt'},
    'eq': {itemId:'eq'}
  }
});
