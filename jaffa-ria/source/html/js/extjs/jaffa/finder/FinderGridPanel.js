/**
 * @class Jaffa.form.FinderGridPanel
 * @extends Ext.grid.GridPanel
 * An extension to {@link Ext.grid.GridPanel} for rendering the output returned by Jaffa's Finder components.
 */
Jaffa.form.FinderGridPanel = Ext.extend(Ext.grid.GridPanel, {
    /**
     * @cfg {object} meta The meta Object.containing the information required for creating the widget. This is a required property.
     */
    remoteGroup : true,
    remoteSort : true,
    initComponent: function() {
        // Apply all the properties declared in the meta object
        Ext.applyIf(this, this.meta.finder.grid.config);
        
        // Create a Store
        if (!this.store) {
            this.store = new Jaffa.data.FinderStore({
                meta: this.meta,
                maxRecords: this.meta.finder.grid.pagingSize,
                remoteSort : true,
                remoteGroup : true,
                groupField : this.groupField
                ,reader: this.meta.getReader(true)
                // This implementation takes effect in Jaffa.data.FinderStore.reload() overload. see detail there.
                ,doNotReload: true
                ,listeners: {
                  load: {
                    fn: function() {
                      delete this.doNotReload
                    },
                    single: true
                  }
                }
//                finderReaderMeta: this.toFinderReaderMeta(this.meta)
            });
        }
        
        // Create a ColumnModel / Filter with new plugin.
        if (!this.plugins)
          this.plugins=[];
        
        var cols = this.columns || Ext.ux.clone(this.meta.finder.grid.columns);
        if(this.columns)
          delete this.columns;

        if (this.initialConfig.addCheckBox) {
          // used in LOV combo which needs to have a multi-row-select checkbox column
          cols.unshift(new Ext.grid.CheckboxSelectionModel(this.checkBoxColumnConfig));
        }
        this.plugins.unshift(
          new Ext.ux.plugins.MetaColumns({
            columns:cols,
            metaClass:this.meta,
            filter:true
          })
        );
        
        // Create the bottom bar
        if (!this.bbar) {
            this.bbar = new Ext.PagingToolbar({
                store: this.store,
                pageSize: this.meta.finder.grid.pagingSize,
                plugins: this.plugins,
                paramNames : {start: 'firstRecord', limit: 'maxRecords'}
            });
        }
        
        this.view = new Ext.grid.GroupingView(this.viewConfig);
        
        // Apply a stateId, but only if the id is null or if the id is generated by ExtJS
        if (!this.stateId && (this.id == null || this.id.indexOf('ext-comp-') == 0))
          this.stateId = this.meta.finder.DWRFunctionName;
        
        // Invoke the initComponent of the base class
        Jaffa.form.FinderGridPanel.superclass.initComponent.call(this);
        delete this.meta;
    },
    
    /* Transforms the input to a meta object compatible with a FinderReader 
     * moved to FinderStore     
     * replaced by Jaffa.data.FinderOutDto.prototype.getReader(true) 6/23/2009 SeanZ
    toFinderReaderMeta: function(meta) {
        return {
            totalProperty: meta.finder.totalProperty,
            root: meta.finder.root,
            fields: this.toFinderReaderFields(meta)
        };
    },
    */
    /* Transforms the input to a meta object compatible with the field list of a FinderReader 
     * moved to FinderStore
    toFinderReaderFields: function(meta) {
        var fields = [];
        var fLen = meta.finder.grid.columns.length;
        for (var i = 0; i < fLen; i++) {
            var fieldName = meta.finder.grid.columns[i];
            var field = meta.fields[fieldName];
            field.name = fieldName;
            fields[fields.length] = field;
        }
        return fields;
    }, */

    /* Transforms the input to a ColumnModel instance for use in a GridPanel */
    toColModel: function(meta) {
        var colModelFields = [];
        var fLen = meta.finder.grid.columns.length;
        for (var i = 0; i < fLen; i++) {
            var fieldName = meta.finder.grid.columns[i];
            if (typeof fieldName == 'string') {
              var field = meta.fields[fieldName];
              if (field.alwaysHide) continue;
              colModelFields.push({
                  dataIndex: fieldName, 
                  header: (field.label ? field.label : fieldName),
                  hidden: (field.hidden? field.hidden : false),
                  width: Math.max(150, Math.min(50, field.width ? field.width*5 : 30))
              });
            } else {
              // fieldName is expected to be a column model in this case. 
              // This happens to LOV combobox grid in which the first column is for checkboxes
              colModelFields.push(fieldName);
            }
        }
        var colModel = new Ext.grid.ColumnModel(colModelFields);
        colModel.defaultSortable = true;
        return colModel;
    },

    /* Transforms the input to a GridFilters instance for use as a plugin to a GridPanel */
    toGridPlugins: function(meta) {
        var filters = [];
        var fLen = meta.finder.grid.columns.length;
        for (var i = 0; i < fLen; i++) {
            var fieldName = meta.finder.grid.columns[i];
            if (typeof fieldName != 'string') {
              // added to skip selection column when used for Lov finders.
              continue;
            }
            var field = meta.fields[fieldName];
            if (field.noFilter) continue;
            var type = field.type == 'int' || field.type == 'float' ? 'numeric' : field.type;
            var flt = {dataIndex: fieldName, type: type};
            if (type=='string' && field.caseType && field.caseType == 'UpperCase') {
              flt.editorStyle = 'text-transform: uppercase;';
            }
            filters[filters.length] = flt;
        }
        return new Ext.ux.grid.GridFilters({filters: filters});
    }

    // @todo: Modify the filter-menus to be similar to the datatype-specific criteria-options of the Finder components
    // @todo: Create a 'criteria' button on the bottom bar to bring up the Criteria panel
    // @todo: Control the initial display of the Criteria panel thru the 'showCriteria' config-property
});

Ext.reg('finderGridPanel', Jaffa.form.FinderGridPanel);
