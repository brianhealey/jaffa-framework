<?xml version="1.0" encoding="UTF-8"?>
<!--
    To make a release use
        -Dlib.dependent.build=download -Ddo.release=y release-HEAD
    To build javadocs use
        -Dlib.dependent.build=download javadoc
    To run unit tests use
        -Dlib.dependent.build=lazy test-junit
    To make a specific release to a known repository
        -Dlib.dependent.build=clean -Drepository.publish=c:\.jaffa\repository\downloads -Drelease.version=1.0.0 -Ddo.release=y release-version

  -Dlib.dependent.build=clean
  -Dlib.dependent.build=dirty
  -Dlib.dependent.build=lazy clean build
  -Dlib.dependent.build=download
  -Dlib.dependent.build=skip jsp-compile
  -Ddeploy.live=true
-->
<project basedir=".." default="build" name="build" xmlns:sonar="antlib:org.sonar.ant" xmlns:ivy="antlib:org.apache.ivy.ant">
  <property name="imports.basedir" value="${basedir}/../JaffaBuild"/>
  <property name="shared.version.propfile" value="${imports.basedir}/build/shared.version.properties"/>

  <!-- make sure 'ant-contrib-1.0b1.jar' is in $ANT_HOME$/lib -->
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

  <property environment="env"/>
  <property file="${imports.basedir}/build/global.ant.properties"/>
  <property file="./build/project.ant.properties"/>
  <property file="${config.file}"/>
  <property file="${imports.basedir}/build/shared.ant.properties"/>
  <property file="${shared.version.propfile}"/>

  <import file="${imports.basedir}/build/build-master.xml"/>
  <import file="${imports.basedir}/build/code-generator.xml"/>
  <defaultexcludes add="${cvs.excludes}"/>

  <!-- Define the SonarQube project properties-->
  <import file="sonar.properties"/>
  
  <target name="usage">
    <echo>
Usage:    build target-name

Available Code Generator Targets:
  generate-app          - Executes the AppBuilder to generate the CRUD descriptors
  generate-all          - Generate all domain and CRUD code
  generate-domain       - Generate all domain code
  generate-finders      - Generate all finder code
  generate-viewers      - Generate all viewer code
  generate-maintenance  - Generate all maintenance code
  generate-lookups      - Generate all lookup code
  generate-skeletons    - Generate all skeleton code
  formatXml             - Format all pattern XML
  formatXml-domain      - Format domain pattern XML
  formatXml-finder      - Format finder pattern XML
  formatXml-lookup      - Format lookup pattern XML
  formatXml-viewer      - Format viewer pattern XML
  formatXml-maintenance - Format maintenance pattern XML
  formatXml-skeleton    - Format skeleton pattern XML
  list-customizations   - Lists the customizations made to code generated files. You may modify the fileset used in 'JaffaBuild/build/code-generator.xml: list-customizations' to narrow the set of files to scan

Available Module Targets:
  clean            - Delete all working folders, so the next build is from source
  get-dependencies - Builds all the dependencies, if not built already.
  compile          - Compile all classes
  jar              - Build JAR file for deployment
  html             - Build a ZIP of HTML needed for inclusion in the WAR file
  build            - Build JAR and ZIP
  javadoc          - Generate Javadoc

Available Module Targets for aiding quick development:
  fast-JSP-Deploy                - Copy JSP Files for current module to Server
  fast-Class-Deploy              - Builds the current module, copies its JAR to the server, restarts the server
  fast-Class-Deploy-With-Aspects - Builds the current module, applies aspects, copies the aspect-ized JAR to the server, restarts the server

Available Testing Targets:
  test-junit          - Runs JUnit Tests and generates report
  test-junit-coverage - Runs JUnit Tests with code coverage and generates report
  test-httpunit       - Builds and deploys application and then executes the HttpUnit tests and generates report
  test-xml-web-inf    - Validate and test files in WEB-INF

Additional Parameters
  -Dlib.dependent.build=[ skip | download | lazy | dirty | clean ]

Available Container Targets:
  jsp-compile      - Compile JSP's in this module against the container to check for compile errors
    </echo>
  </target>



  <!-- =============================================================== -->
  <!-- Generates the JAXB bindings from jaffa-messaging-config_1_0.xsd -->
  <!-- =============================================================== -->
  <target name="jaffa-messaging-config_1_0">
    <md.xjc schemaFileName="${src.java}/org/jaffa/modules/messaging/services/configdomain/jaffa-messaging-config_1_0.xsd"/>
  </target>

  <!-- =============================================================== -->
  <!-- Generates the JAXB bindings from jaffa-scheduler-config_1_0.xsd -->
  <!-- =============================================================== -->
  <target name="jaffa-scheduler-config_1_0">
    <md.xjc schemaFileName="${src.java}/org/jaffa/modules/scheduler/services/configdomain/jaffa-scheduler-config_1_0.xsd"/>
  </target>

  <!-- =============================================================== -->
  <!-- Generates the JAXB bindings from jaffa-transaction-config_1_0.xsd -->
  <!-- =============================================================== -->
  <target name="jaffa-transaction-config_1_0">
    <md.xjc schemaFileName="${src.java}/org/jaffa/transaction/services/configdomain/jaffa-transaction-config_1_0.xsd"/>
  </target>

  <!-- =============================================================== -->
  <!-- Generates the JAXB bindings from soa-events_1_0.xsd -->
  <!-- =============================================================== -->
  <target name="soa-events_1_0">
    <md.xjc schemaFileName="${src.java}/org/jaffa/soa/services/configdomain/soa-events_1_0.xsd"/>
  </target>
	
    <!-- ====================================================================================================== -->
    <!-- Generate domain for view                                                                               -->
    <!-- ====================================================================================================== -->
    <target name="generate-domain-for-view" depends="generator-init">
      <patterngenerator>
        <fileset dir="${project.build}/patterns/domain_for_view_1_0" includes="TransactionSweeperView.xml"/>
      </patterngenerator>
  </target>
  
  <target name="ws-xslt-meta">
     <md.xjc schemaFileName="${src.java}/org/jaffa/soa/transformation/meta/ws_xlst-config.xsd"/>
  </target>

  <!-- =================================== -->
  <!-- Build all jar files for this module -->
  <!-- =================================== -->
  <target name="jar" depends="jar-soa,jar-messaging-tools"/>

  <!-- ===================================== -->
  <!-- Builds jaffa-soa.jar -->
  <!-- ===================================== -->
  <target name="jar-soa" depends="compile">
    <!-- Include everything other than the tools classes -->
    <defaultexcludes add="**/org/jaffa/modules/messaging/tools/*"/>
    <defaultexcludes add="**/org/jaffa/modules/messaging/ext/**/*"/>
    <antcall target="build-module.jar"/>
    <defaultexcludes remove="**/org/jaffa/modules/messaging/tools/*"/>
    <defaultexcludes remove="**/org/jaffa/modules/messaging/ext/**/*"/>
  </target>

  <!-- =========================================== -->
  <!-- Builds jaffa-soa-messaging-tools.jar -->
  <!-- =========================================== -->
  <target name="jar-messaging-tools" depends="jar-soa">
    <!-- Include only the tools classes -->
    <defaultexcludes add="**/org/jaffa/modules/messaging/*"/>
    <defaultexcludes add="**/org/jaffa/modules/messaging/domain/**/*"/>
    <defaultexcludes add="**/org/jaffa/modules/messaging/services/**/*"/>
    <defaultexcludes add="**/org/jaffa/modules/scheduler/**/*"/>
    <defaultexcludes add="**/org/jaffa/modules/setup/**/*"/>
    <defaultexcludes add="**/org/jaffa/qm/**/*"/>
    <defaultexcludes add="**/org/jaffa/soa/**/*"/>
    <defaultexcludes add="**/org/jaffa/transaction/**/*"/>
    <defaultexcludes add="**/resources/**/*"/>
    <defaultexcludes add="**/install/**/*"/>
    <defaultexcludes add="**/upgrade_*/**/*"/>
    <defaultexcludes add="**/org/jaffa/modules/messaging/ext/**/*"/>
    <var name="appname" value="jaffa-soa-messaging-tools"/>
    <antcall target="build-module.jar"/>
    <defaultexcludes remove="**/org/jaffa/modules/messaging/*"/>
    <defaultexcludes remove="**/org/jaffa/modules/messaging/domain/**/*"/>
    <defaultexcludes remove="**/org/jaffa/modules/messaging/services/**/*"/>
    <defaultexcludes remove="**/org/jaffa/modules/scheduler/**/*"/>
    <defaultexcludes remove="**/org/jaffa/modules/setup/**/*"/>
    <defaultexcludes remove="**/org/jaffa/qm/**/*"/>
    <defaultexcludes remove="**/org/jaffa/soa/**/*"/>
    <defaultexcludes remove="**/org/jaffa/transaction/**/*"/>
    <defaultexcludes remove="**/resources/**/*"/>
    <defaultexcludes remove="**/install/**/*"/>
    <defaultexcludes remove="**/upgrade_*/**/*"/>
    <defaultexcludes remove="**/org/jaffa/modules/messaging/ext/**/*"/>
    <var name="appname" value="jaffa-soa"/>
  </target>

   <!-- ====================================================================================================== -->
   <!-- Define the SonarQube target                                                                                   -->
   <!-- ====================================================================================================== -->   
   <target name="sonar" >
    <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
        <!-- Update the following line, or put the "sonar-ant-task-*.jar" file in your "$HOME/.ant/lib" folder -->
        <classpath path="/u01/apache-ant-1.9.1/lib/sonar-ant-task-*.jar" />
    </taskdef>
    <!-- Execute the SonarQube analysis -->
    <sonar:sonar />
   </target>  

</project>
