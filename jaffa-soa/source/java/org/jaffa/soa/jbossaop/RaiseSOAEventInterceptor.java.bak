/*
 * ====================================================================
 * JAFFA - Java Application Framework For All
 *
 * Copyright (C) 2002 JAFFA Development Group
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License, or (at your option) any later version.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Redistribution and use of this software and associated documentation ("Software"),
 * with or without modification, are permitted provided that the following conditions are met:
 * 1.   Redistributions of source code must retain copyright statements and notices.
 *         Redistributions must also contain a copy of this document.
 * 2.   Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 * 3.   The name "JAFFA" must not be used to endorse or promote products derived from
 *  this Software without prior written permission. For written permission,
 *  please contact mail to: jaffagroup@yahoo.com.
 * 4.   Products derived from this Software may not be called "JAFFA" nor may "JAFFA"
 *  appear in their names without prior written permission.
 * 5.   Due credit should be given to the JAFFA Project (http://jaffa.sourceforge.net).
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */
package org.jaffa.soa.jbossaop;

import java.util.*;

import org.apache.log4j.Logger;
import org.jaffa.datatypes.DateOnly;
import org.jaffa.datatypes.DateTime;
import org.jaffa.datatypes.Formatter;
import org.jaffa.datatypes.Parser;
import org.jaffa.modules.messaging.services.HeaderParam;
import org.jaffa.persistence.UOW;
import org.jaffa.rules.jbossaop.interceptors.AbstractRuleInterceptor;
import org.jaffa.rules.jbossaop.tools.AopGenerator;
import org.jaffa.rules.meta.RuleMetaData;
import org.jaffa.rules.util.ScriptHelper;
import org.jaffa.soa.domain.SOAEvent;
import org.jaffa.soa.domain.SOAEventParam;
import org.jaffa.soa.services.RaiseEventService;
import org.jaffa.soa.services.SOAEventQueueMessage;
import org.jaffa.util.BeanHelper;
import org.jboss.aop.joinpoint.MethodInvocation;

/** This rule is used to raise a SOA Event at a given trigger-point.
 */
public class RaiseSOAEventInterceptor extends AbstractRuleInterceptor {

    private static Logger log = Logger.getLogger(RaiseSOAEventInterceptor.class);

    /** Creates an instance.
     */
    public RaiseSOAEventInterceptor() {
        super("raise-soa-event");
    }

    /** Generates a JBossAOP specific pointcut.
     * @param className the class name. Should always be passed.
     * @param propertyName the property name. This input is ignored.
     * @param rule the RuleMetaData for which the pointcut is being generated.
     * @return a JBoss-AOP specific pointcut.
     */
    @Override
    public String[] generatePointcuts(String className, String propertyName, RuleMetaData rule) {
        return new String[] {"execution(* " + className + "->" + rule.getParameter(RuleMetaData.PARAMETER_TRIGGER) + ")"};
    }

    /** Injects the necessary behavior.
     * @param invocation the Invocation.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @throws Throwable if any error occurs.
     * @return output from the next element in the invocation stack.
     */
    protected Object invoke(MethodInvocation invocation, String targetClassName, Object targetObject) throws Throwable {
        UOW uow = getUOW(targetObject);

        // The UOW could be a method argument. Use that if UOW is not available on the targetObject
        if (uow == null && invocation.getArguments() != null) {
            for (Object argument : invocation.getArguments()) {
                if (argument != null && argument instanceof UOW) {
                    uow = (UOW) argument;
                    break;
                }
            }
        }

        boolean localUow = (uow == null);
        try {
            List<RuleMetaData> executeOnReturnRules = null;
            Map<String, List<RuleMetaData>> ruleMap = getPropertyRuleMap(targetClassName, targetObject);
            if (ruleMap != null) {
                List<RuleMetaData> rules = ruleMap.get(null);
                if (rules != null) {
                    for (RuleMetaData rule : rules) {
                        if (AopGenerator.match(invocation.getMethod(), generatePointcuts(targetClassName, null, rule)[0])) {
                            if (uow == null)
                                uow = new UOW();
                            Boolean executeOnReturn = Parser.parseBoolean(rule.getParameter(RuleMetaData.PARAMETER_EXECUTE_ON_RETURN));
                            if (executeOnReturn != null && executeOnReturn) {
                                if (executeOnReturnRules == null)
                                    executeOnReturnRules = new LinkedList<RuleMetaData>();
                                executeOnReturnRules.add(rule);
                            } else {
                                invoke(invocation, targetObject, rule, uow);
                            }
                        }
                    }
                }
            }

            // Execute the method being intercepted
            Object obj = invocation.invokeNext();

            // Execute the executeOnReturn rules
            if (executeOnReturnRules != null) {
                if (uow == null)
                    uow = new UOW();
                if (log.isDebugEnabled())
                    log.debug("Executing the executeOnReturn rules");
                for (RuleMetaData rule : executeOnReturnRules)
                    invoke(invocation, targetObject, rule, uow);
            }

            return obj;
        } finally {
            if (localUow && uow != null)
                uow.commit();
        }
    }

    /** Injects the necessary behavior.
     * Creates a SOAEvent.
     * @param targetObject The target Object.
     * @param rule The rule to be applied.
     * @param uow The UOW.
     * @throws Throwable if any error occurs.
     */
    private void invoke(MethodInvocation invocation, Object targetObject, RuleMetaData rule, UOW uow) throws Throwable {
//        if (targetObject instanceof IPersistent && !((IPersistent) targetObject).isModified()) {
//            if (log.isDebugEnabled())
//                log.debug("Persistent object is unmodified. Will not raise SOA Event");
//            return;
//        }
        if (log.isDebugEnabled())
            log.debug("Applying " + rule + " on " + targetObject);

        // Create a SOAEvent
        /*
        SOAEventQueueMessage message = new SOAEventQueueMessage();
        message.setEventName(rule.getParameter("eventName"));
        message.setDescription(rule.getParameter("description"));*/
        // Add Parameters for the SOAEvent
        List<HeaderParam> headerParamsList = new ArrayList<HeaderParam>();
        headerParamsList.addAll(createSOAEventParameters(rule.getParameter("staticParameters"), null, null, null));
        headerParamsList.addAll(createSOAEventParameters(rule.getParameter("dynamicParameters"), targetObject, invocation, rule));


        //uow.addMessage(message);

        RaiseEventService raiseEventService = new RaiseEventService();
        raiseEventService.raiseSoaEvent(uow, rule.getParameter("eventName"), rule.getParameter("description"), rule.getParameter("category"), headerParamsList);

    }

    /** Creates the required SOAEventParam header params, based on the input
     * @param parameters A semi-colon separated list of parameters (name-value pairs).
     * @param targetObject The target Object. Parameters will be considered static if this argument is null.
     * @param message SoaEventQueueMessage
     * @throws Throwable if any error occurs.
     */
    private List<HeaderParam> createSOAEventParameters(String parameters, Object targetObject, MethodInvocation invocation, RuleMetaData rule) throws Throwable {
        List<HeaderParam> headerParamsList = new ArrayList<HeaderParam>();
        if (parameters != null) {
            for (String parameter : parameters.split(";")) {
                if (log.isDebugEnabled())
                    log.debug("Handling parameter: " + parameter);
                int i = parameter.indexOf('=');
                if (i <= 0 || i == (parameter.length() - 1)) {
                    String str = "Illegal argument passed: " + parameters;
                    log.error(str);
                    throw new IllegalArgumentException(str);
                }
                String name = parameter.substring(0, i);
                String value = parameter.substring(i + 1);
                if (targetObject != null) {
                    try {
                        Object fieldValue = BeanHelper.getField(targetObject, value);
                        value = format(fieldValue);
                    } catch (NoSuchMethodException e) {
                        // Assume the dynamic parameter to be a script
                        Map beans = new HashMap();
                        beans.put(ScriptHelper.CONTEXT_BEAN, targetObject);
                        if (invocation.getArguments() != null){
                            beans.put(ScriptHelper.CONTEXT_ARGUMENTS, invocation.getArguments());
                        }
                        Object fieldValue = ScriptHelper.instance(rule.getParameter(RuleMetaData.PARAMETER_LANGUAGE)).evaluate(null, value, beans,
                                rule.getSource(), rule.getLine() != null ? rule.getLine() : 0, 0);
                        value = format(fieldValue);

                    }
                    if (log.isDebugEnabled())
                        log.debug("Value is: " + value);
                }

                HeaderParam headerParam = new HeaderParam(name, value);
                if (log.isDebugEnabled())
                    log.debug("Created " + headerParam);

                headerParamsList.add(headerParam);
            }
        }
        return headerParamsList;
    }
    
    private String format(Object fieldValue) {
        if (fieldValue instanceof DateOnly) {
            return Formatter.format((DateOnly) fieldValue, "yyyy-MM-dd");
        } else if (fieldValue instanceof DateTime) {
            return Formatter.format((DateTime) fieldValue, "yyyy-MM-dd'T'HH:mm:ss");
        } else {
            return Formatter.format(fieldValue);
        }
    }
}
