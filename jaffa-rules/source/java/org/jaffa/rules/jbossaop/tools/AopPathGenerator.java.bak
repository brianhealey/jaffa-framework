/*
 * ====================================================================
 * JAFFA - Java Application Framework For All
 *
 * Copyright (C) 2002 JAFFA Development Group
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License, or (at your option) any later version.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Redistribution and use of this software and associated documentation ("Software"),
 * with or without modification, are permitted provided that the following conditions are met:
 * 1.   Redistributions of source code must retain copyright statements and notices.
 *         Redistributions must also contain a copy of this document.
 * 2.   Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 * 3.   The name "JAFFA" must not be used to endorse or promote products derived from
 *  this Software without prior written permission. For written permission,
 *  please contact mail to: jaffagroup@yahoo.com.
 * 4.   Products derived from this Software may not be called "JAFFA" nor may "JAFFA"
 *  appear in their names without prior written permission.
 * 5.   Due credit should be given to the JAFFA Project (http://jaffa.sourceforge.net).
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */
package org.jaffa.rules.jbossaop.tools;

import java.io.File;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.jaffa.exceptions.FrameworkException;
import org.jaffa.util.FileHelper;

/** This class is used to generate an AOP path based on the input sources.
 * JBossAOP requires the explicit declaration of each folder containing AOP files.
 * This tool will recursively scan the sub-folders of each source, adding them to the AOP path.
 * <p>
 * The following configuration parameters are required:
 * <ul>sourceNames: Mandatory. A comma-separated list of file and/or folder names containing the source AOP.
 */
public class AopPathGenerator {

    private static Logger log = Logger.getLogger(AopPathGenerator.class);
    private static final String FILE_SUFFIX = "-aop.xml";
    private String m_sourceNames;

    /** Getter for property sourceNames.
     * @return Value of property sourceNames.
     */
    public String getSourceNames() {
        return m_sourceNames;
    }

    /** Setter for property sourceNames.
     * @param sourceNames Value of property sourceNames.
     */
    public void setSourceNames(String sourceNames) {
        m_sourceNames = sourceNames;
    }

    /** Generates an AOP path based on the sourceNames.
     * @return an AOP path based on the sourceNames.
     * @throws FrameworkException if any internal error occurs.
     */
    public String generate() throws FrameworkException {
        if (log.isInfoEnabled())
            log.info("Generating AOP path from '" + getSourceNames() + '\'');

        if (getSourceNames() == null)
            throw new IllegalArgumentException("The parameter sourceName is mandatory");

        Collection<String> aopPath = new LinkedList<String>();
        for (String sourceName : getSourceNames().split(",")) {
            File source = new File(sourceName);
            if (source.exists())
                scan(source, aopPath);
        }

        // Build the aopPath from the Collection
        StringBuilder buf = new StringBuilder();
        for (String s : aopPath) {
            if (buf.length() > 0)
                buf.append(File.pathSeparatorChar);
            buf.append(s);
        }

        String output = buf.toString();
        if (log.isInfoEnabled())
            log.info("Generated AOP path: '" + output + '\'');
        return output.toString();
    }

    /** Recursively scan the source, searching for AOP files. */
    private static void scan(File source, Collection<String> aopPath) {
        if (source.isDirectory()) {
            File[] children = source.listFiles();
            if (children != null) {
                // Perform an alphabetical sort
                FileHelper.sortFiles(children);
                for (File child : children) {
                    if (child.isDirectory()) {
                        // recursively scan the sub folder
                        scan(child, aopPath);
                    } else if (child.isFile() && child.getName().endsWith(FILE_SUFFIX)) {
                        // add the parent to the path
                        String p = child.getParent();
                        if (!aopPath.contains(p))
                            aopPath.add(p);
                    }
                }
            }
        } else if (source.isFile() && source.getName().endsWith(FILE_SUFFIX)) {
            // add the file to the path
            if (!aopPath.contains(source.getAbsolutePath()))
                aopPath.add(source.getAbsolutePath());
        }
    }

    /** This will create an instance of the AopPathGenerator, passing the input arguments.
     * It will then invoke the 'generate()' method.
     * @param args This expects at two arguments to be passed in, viz. sourceNames and property.
     */
    public static void main(String[] args) {
        if (args.length != 1)
            usage();
        try {
            // Configure Log4J to output INFO messages
            org.apache.log4j.BasicConfigurator.configure();
            Logger.getRootLogger().setLevel(Level.INFO);

            // Invoke the tool
            AopPathGenerator generator = new AopPathGenerator();
            generator.setSourceNames(args[0]);
            generator.generate();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    private static void usage() {
        System.err.println("Usage: AopPathGenerator <sourceNames>");
        System.err.println("\tsourceNames=A comma-separated list of file and/or folder names containing the source AOP");
        System.exit(1);
    }
}
