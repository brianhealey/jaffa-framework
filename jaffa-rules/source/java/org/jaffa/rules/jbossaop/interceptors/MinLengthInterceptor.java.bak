/*
 * ====================================================================
 * JAFFA - Java Application Framework For All
 *
 * Copyright (C) 2002 JAFFA Development Group
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License, or (at your option) any later version.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Redistribution and use of this software and associated documentation ("Software"),
 * with or without modification, are permitted provided that the following conditions are met:
 * 1.   Redistributions of source code must retain copyright statements and notices.
 *         Redistributions must also contain a copy of this document.
 * 2.   Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 * 3.   The name "JAFFA" must not be used to endorse or promote products derived from
 *  this Software without prior written permission. For written permission,
 *  please contact mail to: jaffagroup@yahoo.com.
 * 4.   Products derived from this Software may not be called "JAFFA" nor may "JAFFA"
 *  appear in their names without prior written permission.
 * 5.   Due credit should be given to the JAFFA Project (http://jaffa.sourceforge.net).
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */
package org.jaffa.rules.jbossaop.interceptors;

import java.util.List;
import org.apache.log4j.Logger;
import org.jaffa.datatypes.Currency;
import org.jaffa.datatypes.exceptions.TooLittleDataException;
import org.jaffa.rules.meta.RuleMetaData;
import org.jaffa.rules.rulemeta.InvalidRuleParameterException;
import org.jboss.aop.joinpoint.MethodInvocation;

/** When applied to a property, prevents the validate() method from being executed if the Object being passed is is not equal to or greater than the minimum length specified.
 */
public class MinLengthInterceptor extends AbstractValidateInterceptor {

    private static Logger log = Logger.getLogger(MinLengthInterceptor.class);

    /** Creates an instance.
     */
    public MinLengthInterceptor() {
        super("min-length");
    }

    /** Injects the necessary behavior.
     * @param invocation the Invocation.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @param targetPropertyName The target property.
     * @param targetPropertyValue Value for the target property.
     * @param rules the rules to be applied.
     * @throws Throwable if any error occurs.
     */
    protected void invoke(MethodInvocation invocation, String targetClassName, Object targetObject, String targetPropertyName, Object targetPropertyValue, List<RuleMetaData> rules) throws Throwable {
        if (targetPropertyValue != null) {
            for (RuleMetaData rule : rules) {
                if (log.isDebugEnabled())
                    log.debug("Applying " + rule + " on " + targetPropertyValue);

                // Determine the minLength
                Integer minLength = null;
                try {
                    minLength = new Integer(rule.getParameter(RuleMetaData.PARAMETER_VALUE));
                } catch (NumberFormatException e) {
                    throw new InvalidRuleParameterException(targetPropertyName, getName(), "value", rule.getParameter(RuleMetaData.PARAMETER_VALUE));
                }

                if (minLength != null) {
                    if (targetPropertyValue instanceof String) {
                        if (((String) targetPropertyValue).length() < minLength.intValue()) {
                            if (log.isDebugEnabled())
                                log.debug("The length of the value '" + targetPropertyValue + "' is below '" + rule.getParameter(RuleMetaData.PARAMETER_VALUE) + "'");
                            Throwable t = new TooLittleDataException(getPropertyLabel(targetClassName, targetObject, targetPropertyName), new Object[]{rule.getParameter(RuleMetaData.PARAMETER_VALUE)});
                            throw handleException(t, targetObject, rule);
                        }
                    } else if (targetPropertyValue instanceof Number) {
                        if (!checkLength((Number) targetPropertyValue, minLength)) {
                            if (log.isDebugEnabled())
                                log.debug("The length of the value '" + targetPropertyValue + "' is below '" + rule.getParameter(RuleMetaData.PARAMETER_VALUE) + "'");
                            Throwable t = new TooLittleDataException(getPropertyLabel(targetClassName, targetObject, targetPropertyName), new Object[]{rule.getParameter(RuleMetaData.PARAMETER_VALUE)});
                            throw handleException(t, targetObject, rule);
                        }
                    } else if (targetPropertyValue instanceof Currency) {
                        if (!checkLength(((Currency) targetPropertyValue).getValue(), minLength)) {
                            if (log.isDebugEnabled())
                                log.debug("The length of the value '" + targetPropertyValue + "' is below '" + rule.getParameter(RuleMetaData.PARAMETER_VALUE) + "'");
                            Throwable t = new TooLittleDataException(getPropertyLabel(targetClassName, targetObject, targetPropertyName), new Object[]{rule.getParameter(RuleMetaData.PARAMETER_VALUE)});
                            throw handleException(t, targetObject, rule);
                        }
                    } else {
                        if (log.isDebugEnabled())
                            log.debug("This rule does not support instances of " + targetPropertyValue.getClass().getName());
                    }
                }
            }
        }
    }

    /** This method will ensure that the input Number exceeds the specified limit.
     * @param input The number whose length is to be checked.
     * @param intSize The lower limit on the number of digits allowed before the decimal.
     * @return a true if the input Number exceeds the specified limit.
     */
    private boolean checkLength(Number input, Integer intSize) {
        if (input != null && intSize != null) {
            double value = Math.abs(input.doubleValue());

            double intLimit = Math.pow(10, intSize.intValue() - 1);
            if ((long) value < (long) intLimit)
                return false;
        }
        return true;
    }
}
