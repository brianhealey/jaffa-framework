/*
 * ====================================================================
 * JAFFA - Java Application Framework For All
 *
 * Copyright (C) 2002 JAFFA Development Group
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License, or (at your option) any later version.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Redistribution and use of this software and associated documentation ("Software"),
 * with or without modification, are permitted provided that the following conditions are met:
 * 1.   Redistributions of source code must retain copyright statements and notices.
 *         Redistributions must also contain a copy of this document.
 * 2.   Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 * 3.   The name "JAFFA" must not be used to endorse or promote products derived from
 *  this Software without prior written permission. For written permission,
 *  please contact mail to: jaffagroup@yahoo.com.
 * 4.   Products derived from this Software may not be called "JAFFA" nor may "JAFFA"
 *  appear in their names without prior written permission.
 * 5.   Due credit should be given to the JAFFA Project (http://jaffa.sourceforge.net).
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */

package org.jaffa.rules.jbossaop.interceptors;

import java.lang.reflect.Field;
import java.util.List;
import org.apache.log4j.Logger;
import org.apache.struts.config.FormBeanConfig;
import org.jaffa.rules.meta.RuleMetaData;
import org.jboss.aop.joinpoint.MethodInvocation;

/** Struts loads all Form classes during the parsing of the struts-config.xml file.
 * This is done mainly to determine if a Form is DynaForm or otherwise.
 * When using dynamic AOP, the loading of classes will cause the AOP engine to preBind aspects against those classes.
 * Larger the application, larger will be the initial load time.
 * <p>
 * To work around the issue, bind this Interceptor to the setType() method of Struts' FormBeanConfig class.
 * This interceptor will directly update the 'type' field of the FormBeanConfig instance with the input Form className, without loading the Form class.
 * <p>
 * NOTE: The impact of this workaround on applications having DynaForms is unknown.
 * If required, this Interceptor can be made more intelligent to lazily determine the Dynamic nature of the Form class.
 * <p>
 * Usage:
 *      <metadata tag="jaffa.rules" class="org.apache.struts.config.FormBeanConfig">
 *        <property name="type">
 *          <struts-FormBeanConfig/>
 *        </property>
 *      </metadata>
 */
public class StrutsFormBeanConfigInterceptor extends AbstractSetterInterceptor {
    
    private static Logger log = Logger.getLogger(StrutsFormBeanConfigInterceptor.class);
    private static Field c_typeField = null;
    
    
    /** Creates an instance.
     */
    public StrutsFormBeanConfigInterceptor() {
        super("struts-FormBeanConfig");
    }
    
    /** Injects the necessary behavior.
     * Overrides the setType() method of Struts' FormBeanConfig class.
     * Directly updates the 'type' field of the FormBeanConfig instance with the input Form className.
     * The actual setType() is never invoked.
     * @param invocation the Invocation.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @throws Throwable if any error occurs.
     * @return A null is returned.
     */
    @Override
    protected Object invoke(MethodInvocation invocation, String targetClassName, Object targetObject) throws Throwable {
        /* NOTE: The targetObject is actually an instance of 'org.apache.struts.action.ActionFormBean',
         * which is a subclass of 'org.apache.struts.config.FormBeanConfig'.
         * We don't care for the applicable rules, and will simply update the field on the targetObject.
         */
        if (c_typeField == null) {
            c_typeField = FormBeanConfig.class.getDeclaredField("type");
            c_typeField.setAccessible(true);
        }
        Object type = invocation.getArguments()[0];
        if (log.isDebugEnabled())
            log.debug("Setting type='" + type + "' on " + targetObject);
        c_typeField.set(targetObject, type);
        return null;
    }
    
    /** Injects the necessary behavior.
     * NOTE: This method does nothing, and exists merely to provide an implementation for the abstract method of the parent class.
     * This method should never get invoked since the main invoke() method has been overridden.
     * @param invocation the Invocation.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @param targetPropertyName The target property.
     * @param currentPropertyValue The current value of the target property.
     * @param newPropertyValue The new value of the target property.
     * @param rules The rules to be applied.
     * @throws Throwable if any error occurs.
     * @return the newPropertyValue if it satifies the rule, or an altered value.
     */
    protected Object invoke(MethodInvocation invocation, String targetClassName, Object targetObject,
            String targetPropertyName, Object currentPropertyValue, Object newPropertyValue, List<RuleMetaData> rules) throws Throwable {
        // does nothing
        return null;
    }
    
    
}
