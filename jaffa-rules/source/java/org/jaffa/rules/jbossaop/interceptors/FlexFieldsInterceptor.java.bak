/*
 * ====================================================================
 * JAFFA - Java Application Framework For All
 *
 * Copyright (C) 2002 JAFFA Development Group
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License, or (at your option) any later version.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Redistribution and use of this software and associated documentation ("Software"),
 * with or without modification, are permitted provided that the following conditions are met:
 * 1.   Redistributions of source code must retain copyright statements and notices.
 *         Redistributions must also contain a copy of this document.
 * 2.   Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 * 3.   The name "JAFFA" must not be used to endorse or promote products derived from
 *  this Software without prior written permission. For written permission,
 *  please contact mail to: jaffagroup@yahoo.com.
 * 4.   Products derived from this Software may not be called "JAFFA" nor may "JAFFA"
 *  appear in their names without prior written permission.
 * 5.   Due credit should be given to the JAFFA Project (http://jaffa.sourceforge.net).
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */
package org.jaffa.rules.jbossaop.interceptors;

import org.apache.log4j.Logger;
import org.jaffa.flexfields.IFlexCriteriaFields;
import org.jaffa.flexfields.IFlexFields;
import org.jaffa.persistence.Criteria;
import org.jaffa.persistence.IPersistent;
import org.jaffa.rules.jbossaop.mixins.Mixin;
import org.jaffa.rules.meta.RuleMetaData;
import org.jboss.aop.joinpoint.MethodInvocation;

/** 
 * An instance of this rule will be bound to the postAdd, postUpdate, preDelete and isModified methods of a persistent class having flex-fields.
 * For a non-persistent class, this rule will be bound to the validate, clearChanges and hasChanged methods.
 */
public class FlexFieldsInterceptor extends AbstractRuleInterceptor {

    private static Logger log = Logger.getLogger(FlexFieldsInterceptor.class);

    /** Creates an instance.
     */
    public FlexFieldsInterceptor() {
        super("flex-fields");
    }

    /** Generates a JBossAOP specific mixin(s).
     * @param className the class name. Should always be passed.
     * @param propertyName the property name. This input is optional. An implementation may choose to ignore it.
     * @param rule the RuleMetaData for which the pointcut is being generated.
     * @return a JBoss-AOP specific mixin(s).
     */
    @Override
    public Mixin[] generateMixins(String className, String propertyName, RuleMetaData rule) {
        Mixin[] mixins = null;
        try {
            // Introduce FlexFieldsMixin for IPersistent and GraphDataObject instances
            // Introduce FlexCriteriaFieldsMixin for GraphCriteria instances
            Class clazz = Class.forName(className);
            if (IPersistent.class.isAssignableFrom(clazz) || Class.forName("org.jaffa.soa.graph.GraphDataObject").isAssignableFrom(clazz))
                mixins = new Mixin[]{new Mixin(new String[]{"org.jaffa.flexfields.IFlexFields"}, "org.jaffa.rules.jbossaop.mixins.FlexFieldsMixin", "new org.jaffa.rules.jbossaop.mixins.FlexFieldsMixin(this)")};
            else if (Class.forName("org.jaffa.soa.graph.GraphCriteria").isAssignableFrom(clazz))
                mixins = new Mixin[]{new Mixin(new String[]{"org.jaffa.flexfields.IFlexCriteriaFields"}, "org.jaffa.rules.jbossaop.mixins.FlexCriteriaFieldsMixin", "new org.jaffa.rules.jbossaop.mixins.FlexCriteriaFieldsMixin(this)")};
        } catch (ClassNotFoundException ignore) {
        }
        return mixins;
    }

    /** Generates a JBossAOP specific pointcut.
     * @param className the class name. Should always be passed.
     * @param propertyName the property name. This input is ignored.
     * @param rule the RuleMetaData for which the pointcut is being generated.
     * @return a JBoss-AOP specific pointcut.
     */
    @Override
    public String[] generatePointcuts(String className, String propertyName, RuleMetaData rule) {
        String[] pointcuts = null;
        try {
            Class clazz = Class.forName(className);
            if (IPersistent.class.isAssignableFrom(clazz)) {
                pointcuts = new String[]{
                            "execution(void " + className + "->postAdd())",
                            "execution(void " + className + "->postUpdate())",
                            "execution(void " + className + "->preDelete())",
                            "execution(boolean " + className + "->isModified())"
                        };
            } else if (Class.forName("org.jaffa.soa.graph.GraphDataObject").isAssignableFrom(clazz)) {
                pointcuts = new String[]{
                            "execution(void " + className + "->validate())",
                            "execution(void " + className + "->clearChanges())",
                            "execution(boolean " + className + "->hasChanged())"
                        };
            } else if (Class.forName("org.jaffa.soa.graph.GraphCriteria").isAssignableFrom(clazz)) {
                pointcuts = new String[]{
                            "execution(org.jaffa.persistence.Criteria " + className + "->returnQueryClause(org.jaffa.persistence.Criteria))"
                        };
            }
        } catch (ClassNotFoundException ignore) {
        }
        return pointcuts;
    }

    /** Injects the necessary behavior.
     * @param invocation the Invocation.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @throws Throwable if any error occurs.
     * @return output from the next element in the invocation stack.
     */
    protected Object invoke(MethodInvocation invocation, String targetClassName, Object targetObject) throws Throwable {
        if (targetObject instanceof IFlexFields && ((IFlexFields) targetObject).getFlexBean() != null) {
            if (invocation.getMethod().getName().equals("postAdd") || invocation.getMethod().getName().equals("postUpdate")) {
                if (log.isDebugEnabled())
                    log.debug("Invoking update() method on the FlexBean");
                ((IFlexFields) targetObject).getFlexBean().update();
                return invocation.invokeNext();
            } else if (invocation.getMethod().getName().equals("preDelete")) {
                Object obj = invocation.invokeNext();
                if (log.isDebugEnabled())
                    log.debug("Invoking delete() method on the FlexBean");
                ((IFlexFields) targetObject).getFlexBean().delete();
                return obj;
            } else if (invocation.getMethod().getName().equals("isModified")) {
                Boolean obj = (Boolean) invocation.invokeNext();
                if (!obj) {
                    if (log.isDebugEnabled())
                        log.debug("Invoking hasChanged() method on the FlexBean");
                    obj = ((IFlexFields) targetObject).getFlexBean().hasChanged();
                }
                return obj;
            } else if (invocation.getMethod().getName().equals("validate")) {
                Object obj = invocation.invokeNext();
                if (log.isDebugEnabled())
                    log.debug("Invoking validate() method on the FlexBean");
                ((IFlexFields) targetObject).getFlexBean().validate();
                return obj;
            } else if (invocation.getMethod().getName().equals("clearChanges")) {
                Object obj = invocation.invokeNext();
                if (log.isDebugEnabled())
                    log.debug("Invoking clearChanges() method on the FlexBean");
                ((IFlexFields) targetObject).getFlexBean().clearChanges();
                return obj;
            } else if (invocation.getMethod().getName().equals("hasChanged")) {
                Boolean obj = (Boolean) invocation.invokeNext();
                if (!obj) {
                    if (log.isDebugEnabled())
                        log.debug("Invoking hasChanged() method on the FlexBean");
                    obj = ((IFlexFields) targetObject).getFlexBean().hasChanged();
                }
                return obj;
            } else
                log.warn("flex-fields interceptor cannot be bound to the method " + invocation.getMethod().getName());
        } else if (targetObject instanceof IFlexCriteriaFields && ((IFlexCriteriaFields) targetObject).getFlexCriteriaBean() != null) {
            if (invocation.getMethod().getName().equals("returnQueryClause")) {
                Criteria criteria = (Criteria) invocation.invokeNext();
                if (log.isDebugEnabled())
                    log.debug("Invoking returnQueryClause() method on the FlexCriteriaBean");
                criteria = ((IFlexCriteriaFields) targetObject).getFlexCriteriaBean().returnQueryClause(criteria);
                return criteria;
            } else
                log.warn("flex-fields interceptor cannot be bound to the method " + invocation.getMethod().getName());
        }
        return invocation.invokeNext();
    }
}
