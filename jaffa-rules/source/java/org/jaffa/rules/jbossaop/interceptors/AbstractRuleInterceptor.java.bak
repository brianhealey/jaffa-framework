/*
 * ====================================================================
 * JAFFA - Java Application Framework For All
 *
 * Copyright (C) 2002 JAFFA Development Group
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License, or (at your option) any later version.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Redistribution and use of this software and associated documentation ("Software"),
 * with or without modification, are permitted provided that the following conditions are met:
 * 1.	Redistributions of source code must retain copyright statements and notices.
 *         Redistributions must also contain a copy of this document.
 * 2.	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 * 3.	The name "JAFFA" must not be used to endorse or promote products derived from
 * 	this Software without prior written permission. For written permission,
 * 	please contact mail to: jaffagroup@yahoo.com.
 * 4.	Products derived from this Software may not be called "JAFFA" nor may "JAFFA"
 * 	appear in their names without prior written permission.
 * 5.	Due credit should be given to the JAFFA Project (http://jaffa.sourceforge.net).
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */

package org.jaffa.rules.jbossaop.interceptors;

import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import org.apache.log4j.Logger;
import org.jaffa.datatypes.Formatter;
import org.jaffa.exceptions.ApplicationException;
import org.jaffa.exceptions.ApplicationExceptions;
import org.jaffa.exceptions.FrameworkException;
import org.jaffa.flexfields.FlexBean;
import org.jaffa.flexfields.IFlexFields;
import org.jaffa.persistence.IPersistent;
import org.jaffa.persistence.UOW;
import org.jaffa.persistence.util.PersistentHelper;
import org.jaffa.rules.jbossaop.mixins.Mixin;
import org.jaffa.rules.meta.MetaDataRepository;
import org.jaffa.rules.meta.RuleMetaData;
import org.jaffa.rules.rulemeta.IRuleHelper;
import org.jaffa.rules.rulemeta.RuleHelperFactory;
import org.jaffa.util.BeanHelper;
import org.jaffa.util.ExceptionHelper;
import org.jaffa.util.StringHelper;
import org.jboss.aop.joinpoint.ConstructionInvocation;
import org.jboss.aop.joinpoint.Invocation;
import org.jboss.aop.joinpoint.MethodInvocation;

/** An abstract implementation of the the IRuleInterceptor interface, with helper routines for concrete implemenations.
 * <p>
 * It has the following properties:
 * <ul>name: Mandatory. The name of the rule.
 * <ul>targetClassName: Optional. The className for which the rule is applicable.
 */
public abstract class AbstractRuleInterceptor implements IRuleInterceptor {
    
    private static Logger log = Logger.getLogger(AbstractRuleInterceptor.class);
    private String m_name = null;
    private String targetClassName;

    // The following fields are needed to avoid a reverse dependency on the JaffaSOA module
    private static Class c_graphDataObjectClass;
    private static Method c_hasGraphDataObjectChanged;
    private static Method c_hasGraphDataPropertyChanged;
    private static Method c_getGraphDataPropertyOriginalValue;
    static {
        try {
            c_graphDataObjectClass = Class.forName("org.jaffa.soa.graph.GraphDataObject");
            c_hasGraphDataObjectChanged = c_graphDataObjectClass != null ? c_graphDataObjectClass.getMethod("hasChanged") : null;
            c_hasGraphDataPropertyChanged = c_graphDataObjectClass != null ? c_graphDataObjectClass.getMethod("hasChanged", String.class) : null;
            c_getGraphDataPropertyOriginalValue = c_graphDataObjectClass != null ? c_graphDataObjectClass.getMethod("getOriginalValue", String.class) : null;
        } catch (Exception e) {
            if (log.isDebugEnabled())
                log.debug("Exception thrown while trying to get a handle on the GraphDataObject's methods for determining if the object and/or it's properties have been modified", e);
        }
    }

    /** Creates an instance.
     * @param name the name of this Interceptor.
     */
    public AbstractRuleInterceptor(String name) {
        m_name = name;
    }
    
    /** Returns the name of this Interceptor.
     * @return the name of this Interceptor.
     */
    public String getName() {
        return m_name;
    }
    
    /** Getter for property targetClassName.
     * @return Value of property targetClassName.
     */
    public String getTargetClassName() {
        return this.targetClassName;
    }
    
    /** Setter for property targetClassName.
     * @param targetClassName New value of property targetClassName.
     */
    public void setTargetClassName(String targetClassName) {
        this.targetClassName = targetClassName;
    }
    
    /** Injects the necessary behavior.
     * @param invocation the Invocation.
     * @throws Throwable if any error occurs.
     * @return output from the next element in the invocation stack.
     */
    public Object invoke(Invocation invocation) throws Throwable {
        try {
            if(log.isDebugEnabled())
                log.debug(getName() + ": Intercepted execution of '" + ((MethodInvocation) invocation).getMethod() + "' on " + invocation.getTargetObject());
            Object targetObject = getTargetObject(invocation);
            String tClassName = getTargetClassName(invocation);
            return tClassName != null ? invoke((MethodInvocation) invocation, tClassName, targetObject) : invocation.invokeNext();
        } catch (Throwable e) {
            // Find the exceptions thrown by the method
            Class[] exceptionTypes = ((MethodInvocation) invocation).getActualMethod().getExceptionTypes();
            
            // Extract the appropriate exception
            if (exceptionTypes != null && exceptionTypes.length > 0) {
                for (Class exceptionType : exceptionTypes) {
                    Throwable exceptionTypeInstance = ExceptionHelper.extractException(e, exceptionType);
                    if (exceptionTypeInstance != null)
                        throw exceptionTypeInstance;
                }
            }
            
            // If the above doesn't work, then simpy extract FrameworkException or ApplicationExceptions
            throw ExceptionHelper.throwAF(e);
        }
    }
    
    /** Generates a JBossAOP specific pointcut(s).
     * This returns null. A specific implementation is expected to override this and return the appropriate pointcut(s).
     * @param className the class name. Should always be passed.
     * @param propertyName the property name. This input is optional. An implementation may choose to ignore it.
     * @param rule the RuleMetaData for which the pointcut is being generated.
     * @return a JBoss-AOP specific pointcut(s).
     */
    public String[] generatePointcuts(String className, String propertyName, RuleMetaData rule) {
        return null;
    }
    
    /** Generates a JBossAOP specific mixin(s).
     * This returns null. A specific implementation is expected to override this and return the appropriate pointcut(s).
     * @param className the class name. Should always be passed.
     * @param propertyName the property name. This input is optional. An implementation may choose to ignore it.
     * @param rule the RuleMetaData for which the pointcut is being generated.
     * @return a JBoss-AOP specific mixin(s).
     */
    public Mixin[] generateMixins(String className, String propertyName, RuleMetaData rule) {
        return null;
    }

    /** Injects the necessary behavior.
     * @param invocation the Invocation.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @throws Throwable if any error occurs.
     * @return output from the next element in the invocation stack.
     */
    protected abstract Object invoke(MethodInvocation invocation, String targetClassName, Object targetObject) throws Throwable;
    
    
    
    
    /** A convenience method to return the Object whose execution has been intercepted.
     * @param invocation the Invocation.
     * @return the Object whose execution has been intercepted.
     */
    protected Object getTargetObject(Invocation invocation) {
        return invocation.getTargetObject();
    }
    
    /** A convenience method to return the Class of the input Object.
     * It is quite possible that the input Object is a Proxy, in which case this method will return the Interface being implemented.
     * @param targetObject The target Object.
     * @return the Class of the input Object.
     */
    protected String getTargetClassName(Invocation invocation) {
        String output = null;
        Object targetObject = getTargetObject(invocation);
        if (getTargetClassName() != null) {
            if (targetObject instanceof FlexBean) {
                String flexClassName = ((FlexBean) targetObject).getDynaClass() != null ? ((FlexBean) targetObject).getDynaClass().getName() : null;
                if (!getTargetClassName().equals(flexClassName)) {
                    if (log.isDebugEnabled())
                        log.debug("The targetClassName '" + getTargetClassName() + "' does not equal the Flex Class " + flexClassName);
                } else
                    output = flexClassName;
            } else {
                try {
                    Class targetClass = Class.forName(getTargetClassName());
                    // Not sure if we should allow the rules for a parent class if it is assignment compatible.
                    // For now, we'll just check for equality
                    //if (!targetClass.isAssignableFrom(targetObject.getClass())) {
                    if (targetClass != targetObject.getClass()) {
                        if (log.isDebugEnabled())
                            log.debug("The targetClassName '" + getTargetClassName() + "' does not equal the Class of the instance " + targetObject);
                    } else
                        output = targetClass.getName();
                } catch (ClassNotFoundException e) {
                    // Do nothing. A null will be returned
                    if (log.isDebugEnabled())
                        log.debug("Exception in determing targetClass", e);
                }
            }
        } else if (targetObject instanceof FlexBean) {
            output = ((FlexBean) targetObject).getDynaClass() != null ? ((FlexBean) targetObject).getDynaClass().getName() : null;
        } else {
            Class targetClass;
            if (invocation instanceof MethodInvocation)
                targetClass = ((MethodInvocation) invocation).getActualMethod().getDeclaringClass();
            else if (invocation instanceof ConstructionInvocation)
                targetClass = ((ConstructionInvocation) invocation).getConstructor().getDeclaringClass();
            else {
                log.warn("The targetClass will be based on the targetObject since an unsupported Invocation instance was passed: " + invocation.getClass());
                targetClass = getTargetObject(invocation).getClass();
            }
            output = getActualClass(targetClass).getName();
        }
        if (log.isDebugEnabled())
            log.debug("Setting targetClass to " + output);
        return output;
    }
    
    /** This is a helper method to determine the actual class from the input Class,
     * since the input Class could represent a dynamic proxy.
     * The input Class is returned as is, if it is not a dynamic proxy.
     * @param clazz The input Class.
     * @return The actual Class.
     */
    protected Class getActualClass(Class clazz) {
        if (Proxy.isProxyClass(clazz)) {
            for (Class interfaceClass : clazz.getInterfaces()) {
                if (interfaceClass != IPersistent.class) {
                    clazz = interfaceClass;
                    break;
                }
            }
        }
        return clazz;
    }
    
    /** A convenience method to return the propertyName whose setter has been intercepted.
     * @param invocation the Invocation.
     * @return the propertyName whose setter has been intercepted.
     */
    protected String getTargetPropertyName(Invocation invocation) {
        String methodName = ((MethodInvocation) invocation).getMethod().getName();
        String propertyName = methodName.startsWith("set") || methodName.startsWith("get") ? methodName.substring(3)
        : (methodName.startsWith("is") ? methodName.substring(2) : null);
        return propertyName != null ? StringHelper.getJavaBeanStyle(propertyName) : null;
    }
    
    /** Get the UOW, if present, from the input Object.
     * A null will be returned, if the input Object has no such property.
     * @param targetObject The target Object.
     * @return Value of UOW on the target Object.
     */
    protected UOW getUOW(Object targetObject) {
        UOW uow = null;
        if (targetObject instanceof IPersistent)
            uow = ((IPersistent) targetObject).getUOW();
        else if (targetObject instanceof FlexBean) {
            IPersistent persistentObject = ((FlexBean) targetObject).getPersistentObject();
            if (persistentObject != null)
                uow = persistentObject.getUOW();
        } else {
            try {
                Object obj = BeanHelper.getField(targetObject, "UOW");
                if (obj instanceof UOW)
                    uow = (UOW) obj;
            } catch (NoSuchMethodException e) {
                // do nothing.. will simply return a null.
            }
        }
        return uow;
    }
    
    /** Returns a Map containing a List of RuleMetaData instances per propertyName for the className+ruleName combination.
     * The class-level RuleMetaData instances defined for the className+ruleName combination will be added to the Map with propertyName null.
     * The className is obtained from the targetClass.
     * The ruleName is obtained by the invocation of the getName() method.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @return a Map containing a List of RuleMetaData instances per propertyName for the className+ruleName combination.
     * @throws ApplicationExceptions if any application exception occurs.
     * @throws FrameworkException if any internal error occurs.
     */
    protected Map<String, List<RuleMetaData>> getPropertyRuleMap(String targetClassName, Object targetObject) throws ApplicationExceptions, FrameworkException {
        return getPropertyRuleMap(targetClassName, targetObject, getName());
    }
    
    /** Returns a Map containing a List of RuleMetaData instances per propertyName for the className+ruleName combination.
     * The class-level RuleMetaData instances defined for the className+ruleName combination will be added to the Map with propertyName null.
     * The className is obtained from the targetClass.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @param ruleName the rule to search for.
     * @return a Map containing a List of RuleMetaData instances per propertyName for the className+ruleName combination.
     * @throws ApplicationExceptions if any application exception occurs.
     * @throws FrameworkException if any internal error occurs.
     */
    protected Map<String, List<RuleMetaData>> getPropertyRuleMap(String targetClassName, Object targetObject, String ruleName) throws ApplicationExceptions, FrameworkException {
        if (targetClassName != null) {
            // NOTE: We can probably go up the inheritance heirarchy of the targetObject to determine the appropriate rules
            Map<String, List<RuleMetaData>> map = MetaDataRepository.instance().getPropertyRuleMap(targetClassName, ruleName);
            if (map != null) {
                IRuleHelper ruleHelper = RuleHelperFactory.instance(ruleName);
                Map<String, List<RuleMetaData>> newMap = null;
                for (Map.Entry<String, List<RuleMetaData>> me : map.entrySet()) {
                    List<RuleMetaData> rules = ruleHelper.getApplicableRules(targetClassName, targetObject, me.getValue(), true);
                    if (rules != null && rules.size() > 0) {
                        if (newMap == null)
                            newMap = new LinkedHashMap<String, List<RuleMetaData>>();
                        newMap.put(me.getKey(), rules);
                    }
                }
                map = newMap;
            }
            return map;
        } else
            return null;
    }
    
    /** Returns a List of RuleMetaData instances defined for the className+propertyName+ruleName combination.
     * The ruleName is obtained by the invocation of the getName() method.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @param targetPropertyName The target property.
     * @return a List of RuleMetaData instances defined for the className+propertyName+ruleName combination.
     * @throws ApplicationExceptions if any application exception occurs.
     * @throws FrameworkException if any internal error occurs.
     */
    protected List<RuleMetaData> getRuleList(String targetClassName, Object targetObject, String targetPropertyName) throws ApplicationExceptions, FrameworkException {
        return getRuleList(targetClassName, targetObject, targetPropertyName, getName());
    }
    
    /** Returns a List of RuleMetaData instances defined for the className+propertyName+ruleName combination.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @param targetPropertyName The target property.
     * @param ruleName the rule to search for.
     * @return a List of RuleMetaData instances defined for the className+propertyName+ruleName combination.
     * @throws ApplicationExceptions if any application exception occurs.
     * @throws FrameworkException if any internal error occurs.
     */
    protected List<RuleMetaData> getRuleList(String targetClassName, Object targetObject, String targetPropertyName, String ruleName) throws ApplicationExceptions, FrameworkException {
        if (targetClassName != null) {
            // NOTE: We can probably go up the inheritance heirarchy of the targetObject to determine the appropriate rules
            List<RuleMetaData> rules = MetaDataRepository.instance().getRuleList(targetClassName, targetPropertyName, ruleName);
            return RuleHelperFactory.instance(ruleName).getApplicableRules(targetClassName, targetObject, rules, true);
        } else
            return null;
    }
    
    /** A convenience method to return the object label to be used in error messages.
     * It'll check for the label in the following order
     *  - Lookup a 'label' rule for the input class
     *  - Return the class name
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @return label for the class.
     */
    protected String getObjectLabel(String targetClassName, Object targetObject) {
        String label = null;
        try {
            // Search for the first available class-level label rule
            Map<String, List<RuleMetaData>> pkMap = getPropertyRuleMap(targetClassName, targetObject, "label");
            if (pkMap != null && pkMap.containsKey(null)) {
                List<RuleMetaData> rules = pkMap.get(null);
                if (rules != null && rules.size() > 0) {
                    RuleMetaData rule = rules.get(0);
                    label = rule.getParameter(RuleMetaData.PARAMETER_VALUE);
                }
            }
        } catch (Exception e) {
            // do nothing
        }
        
        
        // See if this can be resolved with a persistence meta class
        if (label == null)
            try {
                label = PersistentHelper.getLabelToken(targetClassName);
            } catch (Exception e) {
                // do nothing
            }

        // Finally default to the simple class name
        if (label == null)
            label = StringHelper.getShortClassName(targetClassName);
        
        return label;
    }
    
    /** A convenience method to return the label of the key fields for the input domain class, to be used in error messages.
     * For a composite key, the labels will be comma-separated.
     * It'll check for the label in the following order
     *  - First looks up the 'primary-key' rule for the input class. A null will be returned if the key is not defined.
     *  - Lookup a 'label' rule for each key field. The field name will be returned if the label is not defined.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @return label of the key fields for the input domain class.
     */
    protected String getPrimaryKeyLabel(String targetClassName, Object targetObject) {
        String label = null;
        try {
            String[] primaryKey = null;

            // Search for the first available class-level primary-key rule
            Map<String, List<RuleMetaData>> pkMap = getPropertyRuleMap(targetClassName, targetObject, "primary-key");
            if (pkMap != null && pkMap.containsKey(null)) {
                List<RuleMetaData> rules = pkMap.get(null);
                if (rules != null && rules.size() > 0) {
                    RuleMetaData rule = rules.get(0);
                    String value = rule.getParameter(RuleMetaData.PARAMETER_VALUE);
                    if (value != null)
                        primaryKey = value.split(",");
                }
            }

            if (primaryKey != null) {
                StringBuilder primaryKeyLabel = new StringBuilder();
                for (int i = 0; i < primaryKey.length; i++) {
                    if (i > 0)
                        primaryKeyLabel.append(',');
                    primaryKeyLabel.append(getPropertyLabel(targetClassName, targetObject, primaryKey[i]));
                }
                label = primaryKeyLabel.toString();
            }
        } catch (Exception e) {
            // do nothing
        }
        return label;
    }
    
    /** A convenience method to return the property label to be used in error messages.
     * It'll check for the label in the following order
     *  - Lookup a 'label' rule for this property
     *  - Return the property name
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @param targetPropertyName The property for which the label is to be found.
     * @return label for the property.
     */
    protected String getPropertyLabel(String targetClassName, Object targetObject, String targetPropertyName) {
        String label = null;
        try {
            if (targetObject instanceof FlexBean) {
                if (((FlexBean) targetObject).getDynaClass().getDynaProperty(targetPropertyName) == null && ((FlexBean) targetObject).getPersistentObject() != null) {
                    targetObject = ((FlexBean) targetObject).getPersistentObject();
                    targetClassName = targetObject.getClass().getName();
                }
            } else if (targetObject instanceof IFlexFields) {
                if (((IFlexFields) targetObject).getFlexBean() != null && ((IFlexFields) targetObject).getFlexBean().getDynaClass().getDynaProperty(targetPropertyName) != null) {
                    targetObject = ((IFlexFields) targetObject).getFlexBean();
                    targetClassName = ((FlexBean) targetObject).getDynaClass().getName();
                }
            }
            // Search for the first available property-level label rule
            Map<String, List<RuleMetaData>> pkMap = getPropertyRuleMap(targetClassName, targetObject, "label");
            if (pkMap != null && pkMap.containsKey(targetPropertyName)) {
                List<RuleMetaData> rules = pkMap.get(targetPropertyName);
                if (rules != null && rules.size() > 0) {
                    RuleMetaData rule = rules.get(0);
                    label = rule.getParameter(RuleMetaData.PARAMETER_VALUE);
                }
            }
        } catch (Exception e) {
            // do nothing
        }
        
        if (label == null)
            label = targetPropertyName;
        
        return label;
    }

    /**
     * Returns true if the input Object has been modified.
     * This check can only be performed on instances of IPersistent and GraphDataObject.
     * On all other instances, this check is carried out of a 'public boolean hasChanged()' method exists.
     * A true will be returned otherwise.
     * @param targetObject the object to check.
     * @return true if the input Object has been modified.
     */
    protected boolean isModified(Object targetObject) {
        if (targetObject instanceof IPersistent)
            return ((IPersistent) targetObject).isModified();
        else if (c_graphDataObjectClass != null && c_hasGraphDataObjectChanged != null && c_graphDataObjectClass.isInstance(targetObject)) {
            try {
                return (Boolean) c_hasGraphDataObjectChanged.invoke(targetObject);
            } catch (Exception e) {
                if (log.isDebugEnabled())
                    log.debug("Exception thrown while trying to invoke the hasChanged() method of the GraphDataObject to determine if the object has been modified. Will assume it to be modified", e);
            }
        } else {
            try {
                // invoke 'public boolean hasChanged()', if available
                Method m = targetObject.getClass().getMethod("hasChanged");
                if (m.getReturnType() == Boolean.class || m.getReturnType() == Boolean.TYPE)
                    return (Boolean) m.invoke(targetObject);
            } catch (Exception e) {
                if (log.isDebugEnabled())
                    log.debug("Exception thrown while trying to invoke the hasChanged() method of " + targetObject + " to determine if the object has been modified. Will assume it to be modified", e);
            }
        }
        return true;
    }

    /**
     * Returns true if a given property of the input Object has been modified.
     * This check can only be performed on instances of IPersistent and GraphDataObject.
     * On all other instances, this check is carried out of a 'public boolean hasChanged(String property)' method exists.
     * A true will be returned otherwise.
     * @param targetObject the object to check.
     * @param targetPropertyName the property to check.
     * @return true if a given property of the input Object has been modified.
     */
    protected boolean isModified(Object targetObject, String targetPropertyName) {
        if (targetObject instanceof IPersistent)
            return (!((IPersistent) targetObject).isDatabaseOccurence() || ((IPersistent) targetObject).isModified(StringHelper.getUpper1(targetPropertyName)));
        else if (c_graphDataObjectClass != null && c_hasGraphDataPropertyChanged != null && c_graphDataObjectClass.isInstance(targetObject)) {
            try {
                return (Boolean) c_hasGraphDataPropertyChanged.invoke(targetObject, targetPropertyName);
            } catch (Exception e) {
                if (log.isDebugEnabled())
                    log.debug("Exception thrown while trying to invoke the hasChanged(\"" + targetPropertyName + "\") method of the GraphDataObject to determine if the property has been modified. Will assume it to be modified", e);
            }
        } else {
            try {
                // invoke 'public boolean hasChanged(String property)', if available
                Method m = targetObject.getClass().getMethod("hasChanged", String.class);
                if (m.getReturnType() == Boolean.class || m.getReturnType() == Boolean.TYPE)
                    return (Boolean) m.invoke(targetObject, targetPropertyName);
            } catch (Exception e) {
                if (log.isDebugEnabled())
                    log.debug("Exception thrown while trying to invoke the hasChanged(\"" + targetPropertyName + "\") method of " + targetObject + " to determine if the property has been modified. Will assume it to be modified", e);
            }
        }
        return true;
    }

    /**
     * Returns the original value of a given property of the input Object before it was modified.
     * This method is currently supported only on instances of IPersistent and GraphDataObject.
     * On all other instances, the 'public Object getOriginalValue(String property)' method is invoked, if available.
     * A null will be returned otherwise.
     * @param targetObject the object to check.
     * @param targetPropertyName the property to check.
     * @return the original value of a given property of the input Object before it was modified.
     */
    protected Object returnInitialValue(Object targetObject, String targetPropertyName) {
        if (targetObject instanceof IPersistent)
            return ((IPersistent) targetObject).returnInitialValue(StringHelper.getUpper1(targetPropertyName));
        else if (c_graphDataObjectClass != null && c_hasGraphDataPropertyChanged != null && c_graphDataObjectClass.isInstance(targetObject)) {
            try {
                return c_getGraphDataPropertyOriginalValue.invoke(targetObject, targetPropertyName);
            } catch (Exception e) {
                if (log.isDebugEnabled())
                    log.debug("Exception thrown while trying to invoke the getOriginalValue(\"" + targetPropertyName + "\") method of the GraphDataObject to determine it's initial value. Will assume it to be null", e);
            }
        } else {
            try {
                // invoke 'public Object getOriginalValue(String property)', if available
                Method m = targetObject.getClass().getMethod("getOriginalValue", String.class);
                if (m.getReturnType() != Void.class)
                    return m.invoke(targetObject, targetPropertyName);
            } catch (Exception e) {
                if (log.isDebugEnabled())
                    log.debug("Exception thrown while trying to invoke the getOriginalValue(\"" + targetPropertyName + "\") method of " + targetObject + " to determine it's initial value. Will assume it to be null", e);
            }
        }
        return null;
    }

    /**
     * If a custom errorCode (with optional errorParameters) has been declared for the input rule,
     * a new ApplicationException will be returned; else the input exception will be
     * returned as-is.
     * @param t original exception.
     * @param targetObject The target Object.
     * @param rule the rule being applied.
     * @return a new ApplicationException, if an errorCode was declared on the rule, or the
     * input exception as-is.
     */
    protected Throwable handleException(Throwable t, Object targetObject, RuleMetaData rule) {
        String errorCode = rule.getParameter("errorCode");
        if (errorCode != null) {
            ArrayList<String> arguments = new ArrayList<String>();
            String errorParamList = rule.getParameter("errorParameters");
            if (errorParamList!=null && errorParamList.length()>0){
                String[] errorParams = errorParamList.split(",");
                for (String errorParam:errorParams){
                    String paramValue = null;
                    try{
                        // invoke the GET method and add the value to the argument list
                        paramValue = Formatter.format(BeanHelper.getField(targetObject, errorParam));
                    } catch(Exception e){
                            //suppress error
                            paramValue = "{"+errorParam+"}";
                    } 
                    arguments.add(paramValue!=null?paramValue:"");
                }
            }
            if (log.isDebugEnabled()) {
                log.debug("Creating a new ApplicationException with errorCode: " + errorCode, t);
            }
            t = new ApplicationException(errorCode, arguments.toArray(), t);
        }
        return t;
    }
}
