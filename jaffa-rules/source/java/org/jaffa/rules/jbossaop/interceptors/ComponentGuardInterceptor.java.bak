/*
 * ====================================================================
 * JAFFA - Java Application Framework For All
 *
 * Copyright (C) 2002 JAFFA Development Group
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License, or (at your option) any later version.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Redistribution and use of this software and associated documentation ("Software"),
 * with or without modification, are permitted provided that the following conditions are met:
 * 1.   Redistributions of source code must retain copyright statements and notices.
 *         Redistributions must also contain a copy of this document.
 * 2.   Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 * 3.   The name "JAFFA" must not be used to endorse or promote products derived from
 *  this Software without prior written permission. For written permission,
 *  please contact mail to: jaffagroup@yahoo.com.
 * 4.   Products derived from this Software may not be called "JAFFA" nor may "JAFFA"
 *  appear in their names without prior written permission.
 * 5.   Due credit should be given to the JAFFA Project (http://jaffa.sourceforge.net).
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */
package org.jaffa.rules.jbossaop.interceptors;

import java.security.AccessControlException;
import java.util.List;
import java.util.Map;
import org.apache.log4j.Logger;
import org.jaffa.rules.jbossaop.tools.AopGenerator;
import org.jaffa.rules.meta.RuleMetaData;
import org.jaffa.security.SecurityManager;
import org.jboss.aop.joinpoint.MethodInvocation;

/** This rule is used limit access to a method based on the access to a component.
 * A SecurityException is raised if access is denied.
 */
public class ComponentGuardInterceptor extends AbstractRuleInterceptor {

    private static Logger log = Logger.getLogger(ComponentGuardInterceptor.class);

    /** Creates an instance.
     */
    public ComponentGuardInterceptor() {
        super("component-guard");
    }

    /** Generates a JBossAOP specific pointcut.
     * @param className the class name. Should always be passed.
     * @param propertyName the property name. This input is ignored.
     * @param rule the RuleMetaData for which the pointcut is being generated.
     * @return a JBoss-AOP specific pointcut.
     */
    @Override
    public String[] generatePointcuts(String className, String propertyName, RuleMetaData rule) {
        return new String[] {"execution(* " + className + "->" + rule.getParameter("method") + ")"};
    }

    /** Injects the necessary behavior.
     * @param invocation the Invocation.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @throws Throwable if any error occurs.
     * @return output from the next element in the invocation stack.
     */
    protected Object invoke(MethodInvocation invocation, String targetClassName, Object targetObject) throws Throwable {
        Map<String, List<RuleMetaData>> ruleMap = getPropertyRuleMap(targetClassName, targetObject);
        if (ruleMap != null) {
            List<RuleMetaData> rules = ruleMap.get(null);
            if (rules != null) {
                for (RuleMetaData rule : rules) {
                    if (AopGenerator.match(invocation.getMethod(), generatePointcuts(targetClassName, null, rule)[0]))
                        invoke(invocation, targetClassName, targetObject, rule);
                }
            }
        }

        // Execute the method being intercepted
        return invocation.invokeNext();
    }

    /** Injects the necessary behavior.
     * @param invocation the Invocation.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @param rule The rule to be applied.
     * @throws Throwable if any error occurs.
     * @return output from the next element in the invocation stack.
     */
    private void invoke(MethodInvocation invocation, String targetClassName, Object targetObject, RuleMetaData rule) throws Throwable {
        if (log.isDebugEnabled())
            log.debug("Applying " + rule + " on " + targetObject);
        String name = rule.getParameter("name");
        if (!SecurityManager.checkComponentAccess(name)) {
            String str = "Access to component '" + name + "' is required to be able to invoke '" + rule.getParameter("method") + "' on " + targetClassName;
            log.error(str);
            Throwable t = new AccessControlException(str);
            throw handleException(t, targetObject, rule);
        }
    }
}
