/*
 * ====================================================================
 * JAFFA - Java Application Framework For All
 *
 * Copyright (C) 2002 JAFFA Development Group
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License, or (at your option) any later version.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Redistribution and use of this software and associated documentation ("Software"),
 * with or without modification, are permitted provided that the following conditions are met:
 * 1.	Redistributions of source code must retain copyright statements and notices.
 *         Redistributions must also contain a copy of this document.
 * 2.	Redistributions in binary form must reproduce the above copyright notice,
 * 	this list of conditions and the following disclaimer in the documentation
 * 	and/or other materials provided with the distribution.
 * 3.	The name "JAFFA" must not be used to endorse or promote products derived from
 * 	this Software without prior written permission. For written permission,
 * 	please contact mail to: jaffagroup@yahoo.com.
 * 4.	Products derived from this Software may not be called "JAFFA" nor may "JAFFA"
 * 	appear in their names without prior written permission.
 * 5.	Due credit should be given to the JAFFA Project (http://jaffa.sourceforge.net).
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */
package org.jaffa.rules.jbossaop.interceptors;

import java.util.List;
import org.apache.log4j.Logger;
import org.jaffa.persistence.UOW;
import org.jaffa.rules.meta.RuleMetaData;
import org.jboss.aop.joinpoint.MethodInvocation;

/** An abstract implementation of the the IRuleInterceptor interface, which binds to the setter.
 * It passes an UOW instance to the concrete implementation.
 */
public abstract class AbstractSetterInterceptorWithUOW extends AbstractSetterInterceptor {

    private static Logger log = Logger.getLogger(AbstractSetterInterceptorWithUOW.class);

    /** Creates an instance.
     * @param name the name of this Interceptor.
     */
    public AbstractSetterInterceptorWithUOW(String name) {
        super(name);
    }

    /** Injects the necessary behavior.
     * @param invocation the Invocation.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @param targetPropertyName The target property.
     * @param currentPropertyValue The current value of the target property.
     * @param newPropertyValue The new value of the target property.
     * @param rules The rules to be applied.
     * @throws Throwable if any error occurs.
     * @return the newPropertyValue if it satifies the rule, or an altered value.
     */
    protected Object invoke(MethodInvocation invocation, String targetClassName, Object targetObject,
            String targetPropertyName, Object currentPropertyValue, Object newPropertyValue, List<RuleMetaData> rules) throws Throwable {
        UOW uow = getUOW(targetObject);
        if (uow != null)
            return invoke(invocation, targetClassName, targetObject, targetPropertyName, currentPropertyValue, newPropertyValue, rules, uow);
        else {
            if (log.isDebugEnabled())
                log.debug(getName() + " check not performed since UOW is not available on the targetObject " + targetObject);
            return invocation.invokeNext();
        }
    }

    /** Injects the necessary behavior.
     * @param invocation the Invocation.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @param targetPropertyName The target property.
     * @param currentPropertyValue The current value of the target property.
     * @param newPropertyValue The new value of the target property.
     * @param rules The rules to be applied.
     * @param uow The UOW.
     * @throws Throwable if any error occurs.
     * @return the newPropertyValue if it satifies the rule, or an altered value.
     */
    protected abstract Object invoke(MethodInvocation invocation, String targetClassName, Object targetObject,
            String targetPropertyName, Object currentPropertyValue, Object newPropertyValue, List<RuleMetaData> rules, UOW uow) throws Throwable;
}
