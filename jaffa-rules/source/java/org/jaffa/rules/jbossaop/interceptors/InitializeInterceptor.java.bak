/*
 * ====================================================================
 * JAFFA - Java Application Framework For All
 *
 * Copyright (C) 2002 JAFFA Development Group
 *
 *     This library is free software; you can redistribute it and/or
 *     modify it under the terms of the GNU Lesser General Public
 *     License as published by the Free Software Foundation; either
 *     version 2.1 of the License, or (at your option) any later version.
 *
 *     This library is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *     Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public
 *     License along with this library; if not, write to the Free Software
 *     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Redistribution and use of this software and associated documentation ("Software"),
 * with or without modification, are permitted provided that the following conditions are met:
 * 1.   Redistributions of source code must retain copyright statements and notices.
 *         Redistributions must also contain a copy of this document.
 * 2.   Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 * 3.   The name "JAFFA" must not be used to endorse or promote products derived from
 *  this Software without prior written permission. For written permission,
 *  please contact mail to: jaffagroup@yahoo.com.
 * 4.   Products derived from this Software may not be called "JAFFA" nor may "JAFFA"
 *  appear in their names without prior written permission.
 * 5.   Due credit should be given to the JAFFA Project (http://jaffa.sourceforge.net).
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
 * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
 * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
 * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 * ====================================================================
 */

package org.jaffa.rules.jbossaop.interceptors;

import java.lang.reflect.Field;
import java.util.List;
import java.util.Map;
import org.apache.log4j.Logger;
import org.jaffa.datatypes.DataTypeMapper;
import org.jaffa.datatypes.Parser;
import org.jaffa.flexfields.FlexBean;
import org.jaffa.rules.meta.RuleMetaData;
import org.jaffa.rules.util.ScriptHelper;
import org.jaffa.util.BeanHelper;
import org.jboss.aop.joinpoint.Invocation;
import org.jboss.aop.joinpoint.MethodInvocation;

/** This rule is used to initialize a property when a bean is instantiated.
 */
public class InitializeInterceptor extends AbstractRuleInterceptor {
    
    private static Logger log = Logger.getLogger(InitializeInterceptor.class);
    
    /** Creates an instance.
     */
    public InitializeInterceptor() {
        super("initialize");
    }
    
    /** Generates a JBossAOP specific pointcut.
     * @param className the class name. Should always be passed.
     * @param propertyName the property name. This input is ignored.
     * @param rule the RuleMetaData for which the pointcut is being generated.
     * @return a JBoss-AOP specific pointcut.
     */
    @Override
    public String[] generatePointcuts(String className, String propertyName, RuleMetaData rule) {
        //return "execution($instanceof{" + className + "}->new())";
        return new String[] {"construction(" + className + "->new(..))"};
    }
    
    /** Injects the necessary behavior.
     * @param invocation the Invocation.
     * @throws Throwable if any error occurs.
     * @return output from the next element in the invocation stack.
     */
    @Override
    public Object invoke(Invocation invocation) throws Throwable {
        if(log.isDebugEnabled())
            log.debug(getName() + ": Intercepted execution of " + invocation);
        
        // Let the object be created first
        invocation.invokeNext();
        
        // Now process the rule on the new object
        Object targetObject = getTargetObject(invocation);
        String targetClassName = getTargetClassName(invocation);
        if (targetClassName != null) {
            Map<String, List<RuleMetaData>> ruleMap = getPropertyRuleMap(targetClassName, targetObject);
            if (ruleMap != null) {
                for (Map.Entry<String, List<RuleMetaData>> me : ruleMap.entrySet()) {
                    String targetPropertyName = me.getKey();
                    List<RuleMetaData> rules = me.getValue();
                    if (rules != null && rules.size() > 0)
                        invoke(invocation, targetClassName, targetObject, targetPropertyName, rules.get(0));
                }
            }
        }
        return targetObject;
    }
    
    
    /** Injects the necessary behavior.
     * NOTE: This method does nothing, and exists merely to provide an implementation for the abstract method of the parent class.
     * This method should never get invoked since the main invoke() method has been overridden.
     * @param invocation the Invocation.
     * @param targetClassName The target Class.
     * @param targetObject The target Object.
     * @throws Throwable if any error occurs.
     * @return output from the next element in the invocation stack.
     */
    protected Object invoke(MethodInvocation invocation, String targetClassName, Object targetObject) throws Throwable {
        // this should never be invoked
        return null;
    }
    
    /** Apply the initialize rule. */
    private void invoke(Invocation invocation, String targetClassName, Object targetObject, String targetPropertyName, RuleMetaData rule)
    throws Throwable {
        // Ignore the rule if the targetObject is a FlexBean and is associated with an in-database persistentObject.
        // This is important, else the current value for the flex field will be unintentionally overwritten with the initial value.
        if (targetObject instanceof FlexBean) {
            FlexBean flexBean = (FlexBean) targetObject;
            if (flexBean.getPersistentObject() != null && flexBean.getPersistentObject().isDatabaseOccurence()) {
                if(log.isDebugEnabled())
                    log.debug("Rule " + rule + " on property" + targetPropertyName + " of " + targetObject + " cannot be applied since the targetObject is a FlexBean associated with an in-database persistentObject");
                return;
            }
        }
        if (log.isDebugEnabled())
            log.debug("Applying " + rule + " on property" + targetPropertyName + " of " + targetObject);
        String value = rule.getParameter(RuleMetaData.PARAMETER_VALUE);
        String member = rule.getParameter(RuleMetaData.PARAMETER_MEMBER);
        Boolean expression = Parser.parseBoolean(rule.getParameter(RuleMetaData.PARAMETER_EXPRESSION));
        
        Object evaluatedValue = value;
        if (expression != null && expression) {
            //evaluatedValue = evaluate(null, m_value, obj, getLanguage(), null, 0, 0);
            evaluatedValue = ScriptHelper.instance(rule.getParameter(RuleMetaData.PARAMETER_LANGUAGE)).evaluate(null, value, targetObject,
                    rule.getSource(), rule.getLine() != null ? rule.getLine() : 0, 0);
            if (evaluatedValue != null && !(evaluatedValue instanceof String))
                evaluatedValue = DataTypeMapper.instance().map(evaluatedValue, String.class);
        }
        
        if (member == null) {
            try {
                BeanHelper.setField(targetObject, targetPropertyName, (String) evaluatedValue);
            } catch (Exception e) {
                // The rules engine should be passive and ignore the exceptions that a setter might throw
                if(log.isDebugEnabled())
                    log.debug("Set property '" + targetPropertyName + " = " + evaluatedValue + "' has failed", e);
            }
        } else {
            try {
                Field f = null;
                Class c = Class.forName(targetClassName);
                while (f == null) {
                    try {
                        f = c.getDeclaredField(member);
                    } catch (NoSuchFieldException e) {
                        if (c.getSuperclass() == null)
                            break;
                        c = c.getSuperclass();
                    }
                }
                if (f == null) {
                    if (log.isDebugEnabled())
                        log.debug("Member field " + member + " not found on class " + targetClassName);
                } else {
                    if (!f.isAccessible())
                        f.setAccessible(true);
                    f.set(targetObject, DataTypeMapper.instance().map(evaluatedValue, f.getType()));
                }
            } catch (Exception e) {
                // The rules engine should be passive and ignore the exceptions that a setter might throw
                if (log.isDebugEnabled())
                    log.debug("Set member '" + member + " = " + evaluatedValue + "' has failed", e);
            }
        }
    }
    
}
